
Base_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee8  08002ee8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ee8  08002ee8  00003ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ef0  08002ef0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef4  08002ef4  00003ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002ef8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000005c  08002f54  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08002f54  000043ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b39  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f9  00000000  00000000  00009bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000542  00000000  00000000  0000b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001380a  00000000  00000000  0000bed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000789c  00000000  00000000  0001f6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a2e1  00000000  00000000  00026f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00091259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd0  00000000  00000000  0009129c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0009326c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e40 	.word	0x08002e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002e40 	.word	0x08002e40

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <check_send_flags>:
uint8_t circular_buffer_read(uint8_t* buffer, volatile uint16_t* tail);
uint8_t fifo_dequeue();
void fifo_enqueue(uint8_t message_number);
int is_fifo_empty();

void check_send_flags() {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    if (forkL_request_flag) {
 8000174:	4b18      	ldr	r3, [pc, #96]	@ (80001d8 <check_send_flags+0x68>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	b2db      	uxtb	r3, r3
 800017a:	2b00      	cmp	r3, #0
 800017c:	d006      	beq.n	800018c <check_send_flags+0x1c>
        send_usart_message(&huart1, "request");
 800017e:	4917      	ldr	r1, [pc, #92]	@ (80001dc <check_send_flags+0x6c>)
 8000180:	4817      	ldr	r0, [pc, #92]	@ (80001e0 <check_send_flags+0x70>)
 8000182:	f000 f9cf 	bl	8000524 <send_usart_message>
        forkL_request_flag = 0;
 8000186:	4b14      	ldr	r3, [pc, #80]	@ (80001d8 <check_send_flags+0x68>)
 8000188:	2200      	movs	r2, #0
 800018a:	701a      	strb	r2, [r3, #0]
    }
    if (forkL_release_flag) {
 800018c:	4b15      	ldr	r3, [pc, #84]	@ (80001e4 <check_send_flags+0x74>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	b2db      	uxtb	r3, r3
 8000192:	2b00      	cmp	r3, #0
 8000194:	d006      	beq.n	80001a4 <check_send_flags+0x34>
        send_usart_message(&huart1, "release");
 8000196:	4914      	ldr	r1, [pc, #80]	@ (80001e8 <check_send_flags+0x78>)
 8000198:	4811      	ldr	r0, [pc, #68]	@ (80001e0 <check_send_flags+0x70>)
 800019a:	f000 f9c3 	bl	8000524 <send_usart_message>
        forkL_release_flag = 0;
 800019e:	4b11      	ldr	r3, [pc, #68]	@ (80001e4 <check_send_flags+0x74>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	701a      	strb	r2, [r3, #0]
    }
    if (forkR_request_flag) {
 80001a4:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <check_send_flags+0x7c>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d006      	beq.n	80001bc <check_send_flags+0x4c>
        send_usart_message(&huart2, "request");
 80001ae:	490b      	ldr	r1, [pc, #44]	@ (80001dc <check_send_flags+0x6c>)
 80001b0:	480f      	ldr	r0, [pc, #60]	@ (80001f0 <check_send_flags+0x80>)
 80001b2:	f000 f9b7 	bl	8000524 <send_usart_message>
        forkR_request_flag = 0;
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <check_send_flags+0x7c>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	701a      	strb	r2, [r3, #0]
    }
    if (forkR_release_flag) {
 80001bc:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <check_send_flags+0x84>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d006      	beq.n	80001d4 <check_send_flags+0x64>
        send_usart_message(&huart2, "release");
 80001c6:	4908      	ldr	r1, [pc, #32]	@ (80001e8 <check_send_flags+0x78>)
 80001c8:	4809      	ldr	r0, [pc, #36]	@ (80001f0 <check_send_flags+0x80>)
 80001ca:	f000 f9ab 	bl	8000524 <send_usart_message>
        forkR_release_flag = 0;
 80001ce:	4b09      	ldr	r3, [pc, #36]	@ (80001f4 <check_send_flags+0x84>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
    }
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	2000020e 	.word	0x2000020e
 80001dc:	08002e58 	.word	0x08002e58
 80001e0:	20000078 	.word	0x20000078
 80001e4:	2000020f 	.word	0x2000020f
 80001e8:	08002e60 	.word	0x08002e60
 80001ec:	20000210 	.word	0x20000210
 80001f0:	200000b8 	.word	0x200000b8
 80001f4:	20000211 	.word	0x20000211

080001f8 <check_USART_1_routine>:

void check_USART_1_routine() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b0a2      	sub	sp, #136	@ 0x88
 80001fc:	af00      	add	r7, sp, #0
    if (check_for_new_message(usart1_rx_buffer, &usart1_rx_head, &usart1_rx_tail, &usart1_new_message_flag)) {
 80001fe:	4b2f      	ldr	r3, [pc, #188]	@ (80002bc <check_USART_1_routine+0xc4>)
 8000200:	4a2f      	ldr	r2, [pc, #188]	@ (80002c0 <check_USART_1_routine+0xc8>)
 8000202:	4930      	ldr	r1, [pc, #192]	@ (80002c4 <check_USART_1_routine+0xcc>)
 8000204:	4830      	ldr	r0, [pc, #192]	@ (80002c8 <check_USART_1_routine+0xd0>)
 8000206:	f000 f9e7 	bl	80005d8 <check_for_new_message>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d050      	beq.n	80002b2 <check_USART_1_routine+0xba>
        char message[BUFFER_SIZE];
        // Read the message from the circular buffer
        for (int i = 0; i < BUFFER_SIZE; i++) {
 8000210:	2300      	movs	r3, #0
 8000212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000216:	e017      	b.n	8000248 <check_USART_1_routine+0x50>
            message[i] = circular_buffer_read(usart1_rx_buffer, &usart1_rx_tail);
 8000218:	4929      	ldr	r1, [pc, #164]	@ (80002c0 <check_USART_1_routine+0xc8>)
 800021a:	482b      	ldr	r0, [pc, #172]	@ (80002c8 <check_USART_1_routine+0xd0>)
 800021c:	f000 f9bb 	bl	8000596 <circular_buffer_read>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	1d3a      	adds	r2, r7, #4
 8000226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	701a      	strb	r2, [r3, #0]
            if (message[i] == '\n') break;
 8000230:	1d3a      	adds	r2, r7, #4
 8000232:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000236:	4413      	add	r3, r2
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b0a      	cmp	r3, #10
 800023c:	d009      	beq.n	8000252 <check_USART_1_routine+0x5a>
        for (int i = 0; i < BUFFER_SIZE; i++) {
 800023e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000242:	3301      	adds	r3, #1
 8000244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800024c:	2b7f      	cmp	r3, #127	@ 0x7f
 800024e:	dde3      	ble.n	8000218 <check_USART_1_routine+0x20>
 8000250:	e000      	b.n	8000254 <check_USART_1_routine+0x5c>
            if (message[i] == '\n') break;
 8000252:	bf00      	nop
        }
        // Identify message and store it in FIFO
        if (strcmp((const char *)message, "arrive") == 0) {
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	491d      	ldr	r1, [pc, #116]	@ (80002cc <check_USART_1_routine+0xd4>)
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ff77 	bl	800014c <strcmp>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d103      	bne.n	800026c <check_USART_1_routine+0x74>
            fifo_enqueue(MSG_ARRIVE);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 f8f3 	bl	8000450 <fifo_enqueue>
            fifo_enqueue(MSG_EAT);
        } else if (strcmp((const char *)message, "leave") == 0) {
            fifo_enqueue(MSG_LEAVE);
        }
    }
}
 800026a:	e022      	b.n	80002b2 <check_USART_1_routine+0xba>
        } else if (strcmp((const char *)message, "permit") == 0) {
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4918      	ldr	r1, [pc, #96]	@ (80002d0 <check_USART_1_routine+0xd8>)
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ff6b 	bl	800014c <strcmp>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d103      	bne.n	8000284 <check_USART_1_routine+0x8c>
            fifo_enqueue(MSG_PERMIT);
 800027c:	2002      	movs	r0, #2
 800027e:	f000 f8e7 	bl	8000450 <fifo_enqueue>
}
 8000282:	e016      	b.n	80002b2 <check_USART_1_routine+0xba>
        } else if (strcmp((const char *)message, "eat") == 0) {
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4913      	ldr	r1, [pc, #76]	@ (80002d4 <check_USART_1_routine+0xdc>)
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff5f 	bl	800014c <strcmp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d103      	bne.n	800029c <check_USART_1_routine+0xa4>
            fifo_enqueue(MSG_EAT);
 8000294:	2003      	movs	r0, #3
 8000296:	f000 f8db 	bl	8000450 <fifo_enqueue>
}
 800029a:	e00a      	b.n	80002b2 <check_USART_1_routine+0xba>
        } else if (strcmp((const char *)message, "leave") == 0) {
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	490e      	ldr	r1, [pc, #56]	@ (80002d8 <check_USART_1_routine+0xe0>)
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff53 	bl	800014c <strcmp>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d102      	bne.n	80002b2 <check_USART_1_routine+0xba>
            fifo_enqueue(MSG_LEAVE);
 80002ac:	2004      	movs	r0, #4
 80002ae:	f000 f8cf 	bl	8000450 <fifo_enqueue>
}
 80002b2:	bf00      	nop
 80002b4:	3788      	adds	r7, #136	@ 0x88
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000020c 	.word	0x2000020c
 80002c0:	20000206 	.word	0x20000206
 80002c4:	20000204 	.word	0x20000204
 80002c8:	20000104 	.word	0x20000104
 80002cc:	08002e68 	.word	0x08002e68
 80002d0:	08002e70 	.word	0x08002e70
 80002d4:	08002e78 	.word	0x08002e78
 80002d8:	08002e7c 	.word	0x08002e7c

080002dc <check_USART_2_routine>:

void check_USART_2_routine() {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b0a2      	sub	sp, #136	@ 0x88
 80002e0:	af00      	add	r7, sp, #0
    if (check_for_new_message(usart2_rx_buffer, &usart2_rx_head, &usart2_rx_tail, &usart2_new_message_flag)) {
 80002e2:	4b2f      	ldr	r3, [pc, #188]	@ (80003a0 <check_USART_2_routine+0xc4>)
 80002e4:	4a2f      	ldr	r2, [pc, #188]	@ (80003a4 <check_USART_2_routine+0xc8>)
 80002e6:	4930      	ldr	r1, [pc, #192]	@ (80003a8 <check_USART_2_routine+0xcc>)
 80002e8:	4830      	ldr	r0, [pc, #192]	@ (80003ac <check_USART_2_routine+0xd0>)
 80002ea:	f000 f975 	bl	80005d8 <check_for_new_message>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d050      	beq.n	8000396 <check_USART_2_routine+0xba>
        char message[BUFFER_SIZE];
        // Read the message from the circular buffer
        for (int i = 0; i < BUFFER_SIZE; i++) {
 80002f4:	2300      	movs	r3, #0
 80002f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80002fa:	e017      	b.n	800032c <check_USART_2_routine+0x50>
            message[i] = circular_buffer_read(usart2_rx_buffer, &usart2_rx_tail);
 80002fc:	4929      	ldr	r1, [pc, #164]	@ (80003a4 <check_USART_2_routine+0xc8>)
 80002fe:	482b      	ldr	r0, [pc, #172]	@ (80003ac <check_USART_2_routine+0xd0>)
 8000300:	f000 f949 	bl	8000596 <circular_buffer_read>
 8000304:	4603      	mov	r3, r0
 8000306:	4619      	mov	r1, r3
 8000308:	1d3a      	adds	r2, r7, #4
 800030a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800030e:	4413      	add	r3, r2
 8000310:	460a      	mov	r2, r1
 8000312:	701a      	strb	r2, [r3, #0]
            if (message[i] == '\n') break;
 8000314:	1d3a      	adds	r2, r7, #4
 8000316:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800031a:	4413      	add	r3, r2
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b0a      	cmp	r3, #10
 8000320:	d009      	beq.n	8000336 <check_USART_2_routine+0x5a>
        for (int i = 0; i < BUFFER_SIZE; i++) {
 8000322:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000326:	3301      	adds	r3, #1
 8000328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800032c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000330:	2b7f      	cmp	r3, #127	@ 0x7f
 8000332:	dde3      	ble.n	80002fc <check_USART_2_routine+0x20>
 8000334:	e000      	b.n	8000338 <check_USART_2_routine+0x5c>
            if (message[i] == '\n') break;
 8000336:	bf00      	nop
        }
        // Identify message and store it in FIFO
        if (strcmp((const char *)message, "arrive") == 0) {
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	491d      	ldr	r1, [pc, #116]	@ (80003b0 <check_USART_2_routine+0xd4>)
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff05 	bl	800014c <strcmp>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d103      	bne.n	8000350 <check_USART_2_routine+0x74>
            fifo_enqueue(MSG_ARRIVE);
 8000348:	2001      	movs	r0, #1
 800034a:	f000 f881 	bl	8000450 <fifo_enqueue>
            fifo_enqueue(MSG_EAT);
        } else if (strcmp((const char *)message, "leave") == 0) {
            fifo_enqueue(MSG_LEAVE);
        }
    }
}
 800034e:	e022      	b.n	8000396 <check_USART_2_routine+0xba>
        } else if (strcmp((const char *)message, "permit") == 0) {
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4918      	ldr	r1, [pc, #96]	@ (80003b4 <check_USART_2_routine+0xd8>)
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff fef9 	bl	800014c <strcmp>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d103      	bne.n	8000368 <check_USART_2_routine+0x8c>
            fifo_enqueue(MSG_PERMIT);
 8000360:	2002      	movs	r0, #2
 8000362:	f000 f875 	bl	8000450 <fifo_enqueue>
}
 8000366:	e016      	b.n	8000396 <check_USART_2_routine+0xba>
        } else if (strcmp((const char *)message, "eat") == 0) {
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4913      	ldr	r1, [pc, #76]	@ (80003b8 <check_USART_2_routine+0xdc>)
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff feed 	bl	800014c <strcmp>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d103      	bne.n	8000380 <check_USART_2_routine+0xa4>
            fifo_enqueue(MSG_EAT);
 8000378:	2003      	movs	r0, #3
 800037a:	f000 f869 	bl	8000450 <fifo_enqueue>
}
 800037e:	e00a      	b.n	8000396 <check_USART_2_routine+0xba>
        } else if (strcmp((const char *)message, "leave") == 0) {
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	490e      	ldr	r1, [pc, #56]	@ (80003bc <check_USART_2_routine+0xe0>)
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff fee1 	bl	800014c <strcmp>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d102      	bne.n	8000396 <check_USART_2_routine+0xba>
            fifo_enqueue(MSG_LEAVE);
 8000390:	2004      	movs	r0, #4
 8000392:	f000 f85d 	bl	8000450 <fifo_enqueue>
}
 8000396:	bf00      	nop
 8000398:	3788      	adds	r7, #136	@ 0x88
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000020d 	.word	0x2000020d
 80003a4:	2000020a 	.word	0x2000020a
 80003a8:	20000208 	.word	0x20000208
 80003ac:	20000184 	.word	0x20000184
 80003b0:	08002e68 	.word	0x08002e68
 80003b4:	08002e70 	.word	0x08002e70
 80003b8:	08002e78 	.word	0x08002e78
 80003bc:	08002e7c 	.word	0x08002e7c

080003c0 <check_FIFO_queue>:

void check_FIFO_queue() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
    // If any of the message flags are set, return
    if (msgsrv_arrive_flag || msgsrv_permit_flag || msgsrv_eat_flag || msgsrv_leave_flag) return;
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <check_FIFO_queue+0x80>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d133      	bne.n	8000438 <check_FIFO_queue+0x78>
 80003d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000444 <check_FIFO_queue+0x84>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d12e      	bne.n	8000438 <check_FIFO_queue+0x78>
 80003da:	4b1b      	ldr	r3, [pc, #108]	@ (8000448 <check_FIFO_queue+0x88>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d129      	bne.n	8000438 <check_FIFO_queue+0x78>
 80003e4:	4b19      	ldr	r3, [pc, #100]	@ (800044c <check_FIFO_queue+0x8c>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d124      	bne.n	8000438 <check_FIFO_queue+0x78>

    // If FIFO is not empty, dequeue and process the message
    if (!is_fifo_empty()) {
 80003ee:	f000 f871 	bl	80004d4 <is_fifo_empty>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d120      	bne.n	800043a <check_FIFO_queue+0x7a>
        uint8_t message = fifo_dequeue();
 80003f8:	f000 f84c 	bl	8000494 <fifo_dequeue>
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]

        // Set the appropriate message flag
        if (message == MSG_ARRIVE) {
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d103      	bne.n	800040e <check_FIFO_queue+0x4e>
            msgsrv_arrive_flag = 1;
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <check_FIFO_queue+0x80>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	e015      	b.n	800043a <check_FIFO_queue+0x7a>
        } else if (message == MSG_PERMIT) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b02      	cmp	r3, #2
 8000412:	d103      	bne.n	800041c <check_FIFO_queue+0x5c>
            msgsrv_permit_flag = 1;
 8000414:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <check_FIFO_queue+0x84>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
 800041a:	e00e      	b.n	800043a <check_FIFO_queue+0x7a>
        } else if (message == MSG_EAT) {
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d103      	bne.n	800042a <check_FIFO_queue+0x6a>
            msgsrv_eat_flag = 1;
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <check_FIFO_queue+0x88>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	e007      	b.n	800043a <check_FIFO_queue+0x7a>
        } else if (message == MSG_LEAVE) {
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b04      	cmp	r3, #4
 800042e:	d104      	bne.n	800043a <check_FIFO_queue+0x7a>
            msgsrv_leave_flag = 1;
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <check_FIFO_queue+0x8c>)
 8000432:	2201      	movs	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	e000      	b.n	800043a <check_FIFO_queue+0x7a>
    if (msgsrv_arrive_flag || msgsrv_permit_flag || msgsrv_eat_flag || msgsrv_leave_flag) return;
 8000438:	bf00      	nop
        }
    }
}
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000212 	.word	0x20000212
 8000444:	20000213 	.word	0x20000213
 8000448:	20000214 	.word	0x20000214
 800044c:	20000215 	.word	0x20000215

08000450 <fifo_enqueue>:

void fifo_enqueue(uint8_t message_number) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
    fifo_queue[fifo_head] = message_number;
 800045a:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <fifo_enqueue+0x3c>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	4a0b      	ldr	r2, [pc, #44]	@ (8000490 <fifo_enqueue+0x40>)
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	5453      	strb	r3, [r2, r1]
    fifo_head = (fifo_head + 1) % FIFO_SIZE;
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <fifo_enqueue+0x3c>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	425a      	negs	r2, r3
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	f002 0207 	and.w	r2, r2, #7
 8000476:	bf58      	it	pl
 8000478:	4253      	negpl	r3, r2
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b03      	ldr	r3, [pc, #12]	@ (800048c <fifo_enqueue+0x3c>)
 800047e:	701a      	strb	r2, [r3, #0]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000100 	.word	0x20000100
 8000490:	200000f8 	.word	0x200000f8

08000494 <fifo_dequeue>:

uint8_t fifo_dequeue() {
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
    uint8_t message = fifo_queue[fifo_tail];
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <fifo_dequeue+0x38>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <fifo_dequeue+0x3c>)
 80004a2:	5c9b      	ldrb	r3, [r3, r2]
 80004a4:	71fb      	strb	r3, [r7, #7]
    fifo_tail = (fifo_tail + 1) % FIFO_SIZE;
 80004a6:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <fifo_dequeue+0x38>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	425a      	negs	r2, r3
 80004ae:	f003 0307 	and.w	r3, r3, #7
 80004b2:	f002 0207 	and.w	r2, r2, #7
 80004b6:	bf58      	it	pl
 80004b8:	4253      	negpl	r3, r2
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b03      	ldr	r3, [pc, #12]	@ (80004cc <fifo_dequeue+0x38>)
 80004be:	701a      	strb	r2, [r3, #0]
    return message;
 80004c0:	79fb      	ldrb	r3, [r7, #7]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000101 	.word	0x20000101
 80004d0:	200000f8 	.word	0x200000f8

080004d4 <is_fifo_empty>:

int is_fifo_empty() {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    return fifo_head == fifo_tail;
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <is_fifo_empty+0x20>)
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <is_fifo_empty+0x24>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000100 	.word	0x20000100
 80004f8:	20000101 	.word	0x20000101

080004fc <add_crlf>:


const char* add_crlf(const char* str) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    static char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s\r\n", str);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <add_crlf+0x20>)
 8000508:	2180      	movs	r1, #128	@ 0x80
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <add_crlf+0x24>)
 800050c:	f001 ffd4 	bl	80024b8 <sniprintf>
    return buffer;
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <add_crlf+0x24>)
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	08002e84 	.word	0x08002e84
 8000520:	2000021c 	.word	0x2000021c

08000524 <send_usart_message>:

void send_usart_message(UART_HandleTypeDef* huart, const char* message) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
    const char* msg_with_crlf = add_crlf(message);
 800052e:	6838      	ldr	r0, [r7, #0]
 8000530:	f7ff ffe4 	bl	80004fc <add_crlf>
 8000534:	60f8      	str	r0, [r7, #12]
    HAL_UART_Transmit_IT(huart, (uint8_t*)msg_with_crlf, strlen(msg_with_crlf));
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f7ff fe12 	bl	8000160 <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	b29b      	uxth	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	68f9      	ldr	r1, [r7, #12]
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f001 fc18 	bl	8001d7a <HAL_UART_Transmit_IT>
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <circular_buffer_write>:

// Circular buffer write for receiving data
void circular_buffer_write(uint8_t* buffer, volatile uint16_t* head, uint8_t data) {
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	4613      	mov	r3, r2
 800055e:	71fb      	strb	r3, [r7, #7]
    buffer[*head] = data;
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b29b      	uxth	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4413      	add	r3, r2
 800056c:	79fa      	ldrb	r2, [r7, #7]
 800056e:	701a      	strb	r2, [r3, #0]
    *head = (*head + 1) % BUFFER_SIZE;
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	3301      	adds	r3, #1
 8000578:	425a      	negs	r2, r3
 800057a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800057e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000582:	bf58      	it	pl
 8000584:	4253      	negpl	r3, r2
 8000586:	b29a      	uxth	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <circular_buffer_read>:

uint8_t circular_buffer_read(uint8_t* buffer, volatile uint16_t* tail) {
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
    uint8_t data = buffer[*tail];
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	73fb      	strb	r3, [r7, #15]
    *tail = (*tail + 1) % BUFFER_SIZE;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	3301      	adds	r3, #1
 80005b8:	425a      	negs	r2, r3
 80005ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80005c2:	bf58      	it	pl
 80005c4:	4253      	negpl	r3, r2
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	801a      	strh	r2, [r3, #0]
    return data;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <check_for_new_message>:

// Function to check if a complete message has been received (CRLF)
uint8_t check_for_new_message(uint8_t* buffer, volatile uint16_t* head, volatile uint16_t* tail, volatile uint8_t* new_message_flag) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	603b      	str	r3, [r7, #0]
    if (*new_message_flag) {
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d004      	beq.n	80005fa <check_for_new_message+0x22>
        *new_message_flag = 0;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
        return 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e000      	b.n	80005fc <check_for_new_message+0x24>
    }
    return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
	...

08000608 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    uint8_t received_byte;

    if (huart->Instance == USART1) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a33      	ldr	r2, [pc, #204]	@ (80006e4 <HAL_UART_RxCpltCallback+0xdc>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d12d      	bne.n	8000676 <HAL_UART_RxCpltCallback+0x6e>
        received_byte = huart->pRxBuffPtr[0];  // Received byte from USART1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	72fb      	strb	r3, [r7, #11]
        circular_buffer_write(usart1_rx_buffer, &usart1_rx_head, received_byte);
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	461a      	mov	r2, r3
 8000626:	4930      	ldr	r1, [pc, #192]	@ (80006e8 <HAL_UART_RxCpltCallback+0xe0>)
 8000628:	4830      	ldr	r0, [pc, #192]	@ (80006ec <HAL_UART_RxCpltCallback+0xe4>)
 800062a:	f7ff ff92 	bl	8000552 <circular_buffer_write>

        // Check if last two bytes are CR (13) and LF (10)
        uint16_t prev_index = (usart1_rx_head + BUFFER_SIZE - 2) % BUFFER_SIZE;
 800062e:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <HAL_UART_RxCpltCallback+0xe0>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	337e      	adds	r3, #126	@ 0x7e
 8000636:	425a      	negs	r2, r3
 8000638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800063c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000640:	bf58      	it	pl
 8000642:	4253      	negpl	r3, r2
 8000644:	81bb      	strh	r3, [r7, #12]
        if (usart1_rx_buffer[prev_index] == 13 && usart1_rx_buffer[usart1_rx_head - 1] == 10) {
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <HAL_UART_RxCpltCallback+0xe4>)
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d10a      	bne.n	8000666 <HAL_UART_RxCpltCallback+0x5e>
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <HAL_UART_RxCpltCallback+0xe0>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	3b01      	subs	r3, #1
 8000658:	4a24      	ldr	r2, [pc, #144]	@ (80006ec <HAL_UART_RxCpltCallback+0xe4>)
 800065a:	5cd3      	ldrb	r3, [r2, r3]
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d102      	bne.n	8000666 <HAL_UART_RxCpltCallback+0x5e>
            usart1_new_message_flag = 1;  // Set new message flag
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <HAL_UART_RxCpltCallback+0xe8>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
        }

        // Ready to receive the next byte
        HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 8000666:	f107 030b 	add.w	r3, r7, #11
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	4821      	ldr	r0, [pc, #132]	@ (80006f4 <HAL_UART_RxCpltCallback+0xec>)
 8000670:	f001 fbc7 	bl	8001e02 <HAL_UART_Receive_IT>
        }

        // Ready to receive the next byte
        HAL_UART_Receive_IT(&huart2, &received_byte, 1);
    }
}
 8000674:	e031      	b.n	80006da <HAL_UART_RxCpltCallback+0xd2>
    else if (huart->Instance == USART2) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1f      	ldr	r2, [pc, #124]	@ (80006f8 <HAL_UART_RxCpltCallback+0xf0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d12c      	bne.n	80006da <HAL_UART_RxCpltCallback+0xd2>
        received_byte = huart->pRxBuffPtr[0];  // Received byte from USART2
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	72fb      	strb	r3, [r7, #11]
        circular_buffer_write(usart2_rx_buffer, &usart2_rx_head, received_byte);
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	461a      	mov	r2, r3
 800068c:	491b      	ldr	r1, [pc, #108]	@ (80006fc <HAL_UART_RxCpltCallback+0xf4>)
 800068e:	481c      	ldr	r0, [pc, #112]	@ (8000700 <HAL_UART_RxCpltCallback+0xf8>)
 8000690:	f7ff ff5f 	bl	8000552 <circular_buffer_write>
        uint16_t prev_index = (usart2_rx_head + BUFFER_SIZE - 2) % BUFFER_SIZE;
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <HAL_UART_RxCpltCallback+0xf4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	337e      	adds	r3, #126	@ 0x7e
 800069c:	425a      	negs	r2, r3
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80006a6:	bf58      	it	pl
 80006a8:	4253      	negpl	r3, r2
 80006aa:	81fb      	strh	r3, [r7, #14]
        if (usart2_rx_buffer[prev_index] == 13 && usart2_rx_buffer[usart2_rx_head - 1] == 10) {
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <HAL_UART_RxCpltCallback+0xf8>)
 80006b0:	5cd3      	ldrb	r3, [r2, r3]
 80006b2:	2b0d      	cmp	r3, #13
 80006b4:	d10a      	bne.n	80006cc <HAL_UART_RxCpltCallback+0xc4>
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_UART_RxCpltCallback+0xf4>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a10      	ldr	r2, [pc, #64]	@ (8000700 <HAL_UART_RxCpltCallback+0xf8>)
 80006c0:	5cd3      	ldrb	r3, [r2, r3]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d102      	bne.n	80006cc <HAL_UART_RxCpltCallback+0xc4>
            usart2_new_message_flag = 1;  // Set new message flag
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_UART_RxCpltCallback+0xfc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 80006cc:	f107 030b 	add.w	r3, r7, #11
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <HAL_UART_RxCpltCallback+0x100>)
 80006d6:	f001 fb94 	bl	8001e02 <HAL_UART_Receive_IT>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40013800 	.word	0x40013800
 80006e8:	20000204 	.word	0x20000204
 80006ec:	20000104 	.word	0x20000104
 80006f0:	2000020c 	.word	0x2000020c
 80006f4:	20000078 	.word	0x20000078
 80006f8:	40004400 	.word	0x40004400
 80006fc:	20000208 	.word	0x20000208
 8000700:	20000184 	.word	0x20000184
 8000704:	2000020d 	.word	0x2000020d
 8000708:	200000b8 	.word	0x200000b8

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 fb49 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f8c1 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f94f 	bl	80009bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800071e:	f000 f8f9 	bl	8000914 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000722:	f000 f921 	bl	8000968 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t temp_byte;
  HAL_UART_Receive_IT(&huart1, &temp_byte, 1);
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	484d      	ldr	r0, [pc, #308]	@ (8000864 <label_end+0x4>)
 800072e:	f001 fb68 	bl	8001e02 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &temp_byte, 1);
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	484b      	ldr	r0, [pc, #300]	@ (8000868 <label_end+0x8>)
 800073a:	f001 fb62 	bl	8001e02 <HAL_UART_Receive_IT>
  while (1)
  {
      check_USART_1_routine();
 800073e:	f7ff fd5b 	bl	80001f8 <check_USART_1_routine>
      check_USART_2_routine();
 8000742:	f7ff fdcb 	bl	80002dc <check_USART_2_routine>
      check_send_flags();
 8000746:	f7ff fd13 	bl	8000170 <check_send_flags>
      check_FIFO_queue();
 800074a:	f7ff fe39 	bl	80003c0 <check_FIFO_queue>
      asm("nop \n"
 800074e:	bf00      	nop
 8000750:	4846      	ldr	r0, [pc, #280]	@ (800086c <label_end+0xc>)
 8000752:	6801      	ldr	r1, [r0, #0]
 8000754:	2901      	cmp	r1, #1
 8000756:	d00c      	beq.n	8000772 <msgsrv_arrive>
 8000758:	4845      	ldr	r0, [pc, #276]	@ (8000870 <label_end+0x10>)
 800075a:	6801      	ldr	r1, [r0, #0]
 800075c:	2901      	cmp	r1, #1
 800075e:	d011      	beq.n	8000784 <msgsrv_permit>
 8000760:	4844      	ldr	r0, [pc, #272]	@ (8000874 <label_end+0x14>)
 8000762:	6801      	ldr	r1, [r0, #0]
 8000764:	2901      	cmp	r1, #1
 8000766:	d051      	beq.n	800080c <msgsrv_eat>
 8000768:	4843      	ldr	r0, [pc, #268]	@ (8000878 <label_end+0x18>)
 800076a:	6801      	ldr	r1, [r0, #0]
 800076c:	2901      	cmp	r1, #1
 800076e:	d05a      	beq.n	8000826 <msgsrv_leave>
 8000770:	e076      	b.n	8000860 <label_end>

08000772 <msgsrv_arrive>:
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	493d      	ldr	r1, [pc, #244]	@ (800086c <label_end+0xc>)
 8000778:	6008      	str	r0, [r1, #0]
 800077a:	f04f 0001 	mov.w	r0, #1
 800077e:	493f      	ldr	r1, [pc, #252]	@ (800087c <label_end+0x1c>)
 8000780:	6008      	str	r0, [r1, #0]
 8000782:	4770      	bx	lr

08000784 <msgsrv_permit>:
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	4939      	ldr	r1, [pc, #228]	@ (8000870 <label_end+0x10>)
 800078a:	6008      	str	r0, [r1, #0]
 800078c:	483c      	ldr	r0, [pc, #240]	@ (8000880 <label_end+0x20>)
 800078e:	6801      	ldr	r1, [r0, #0]
 8000790:	2901      	cmp	r1, #1
 8000792:	d014      	beq.n	80007be <else_label1>
 8000794:	483b      	ldr	r0, [pc, #236]	@ (8000884 <label_end+0x24>)
 8000796:	6801      	ldr	r1, [r0, #0]
 8000798:	2900      	cmp	r1, #0
 800079a:	d002      	beq.n	80007a2 <else_label2>
 800079c:	f04f 0200 	mov.w	r2, #0
 80007a0:	e001      	b.n	80007a6 <end_label2>

080007a2 <else_label2>:
 80007a2:	f04f 0201 	mov.w	r2, #1

080007a6 <end_label2>:
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d008      	beq.n	80007bc <else_label3>
 80007aa:	f04f 0001 	mov.w	r0, #1
 80007ae:	4935      	ldr	r1, [pc, #212]	@ (8000884 <label_end+0x24>)
 80007b0:	6008      	str	r0, [r1, #0]
 80007b2:	f04f 0001 	mov.w	r0, #1
 80007b6:	4934      	ldr	r1, [pc, #208]	@ (8000888 <label_end+0x28>)
 80007b8:	6008      	str	r0, [r1, #0]
 80007ba:	e7ff      	b.n	80007bc <else_label3>

080007bc <else_label3>:
 80007bc:	e025      	b.n	800080a <else_label5>

080007be <else_label1>:
 80007be:	4831      	ldr	r0, [pc, #196]	@ (8000884 <label_end+0x24>)
 80007c0:	6801      	ldr	r1, [r0, #0]
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d002      	beq.n	80007cc <else_label13>
 80007c6:	f04f 0201 	mov.w	r2, #1
 80007ca:	e001      	b.n	80007d0 <end_label13>

080007cc <else_label13>:
 80007cc:	f04f 0200 	mov.w	r2, #0

080007d0 <end_label13>:
 80007d0:	482e      	ldr	r0, [pc, #184]	@ (800088c <label_end+0x2c>)
 80007d2:	6801      	ldr	r1, [r0, #0]
 80007d4:	2900      	cmp	r1, #0
 80007d6:	d002      	beq.n	80007de <else_label14>
 80007d8:	f04f 0301 	mov.w	r3, #1
 80007dc:	e001      	b.n	80007e2 <end_label14>

080007de <else_label14>:
 80007de:	f04f 0300 	mov.w	r3, #0

080007e2 <end_label14>:
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <else_label4>
 80007e6:	f04f 0400 	mov.w	r4, #0
 80007ea:	e001      	b.n	80007f0 <end_label4>

080007ec <else_label4>:
 80007ec:	f04f 0401 	mov.w	r4, #1

080007f0 <end_label4>:
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00a      	beq.n	800080a <else_label5>
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d008      	beq.n	800080a <else_label5>
 80007f8:	f04f 0001 	mov.w	r0, #1
 80007fc:	4923      	ldr	r1, [pc, #140]	@ (800088c <label_end+0x2c>)
 80007fe:	6008      	str	r0, [r1, #0]
 8000800:	f04f 0001 	mov.w	r0, #1
 8000804:	491b      	ldr	r1, [pc, #108]	@ (8000874 <label_end+0x14>)
 8000806:	6008      	str	r0, [r1, #0]
 8000808:	e7ff      	b.n	800080a <else_label5>

0800080a <else_label5>:
 800080a:	4770      	bx	lr

0800080c <msgsrv_eat>:
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4918      	ldr	r1, [pc, #96]	@ (8000874 <label_end+0x14>)
 8000812:	6008      	str	r0, [r1, #0]
 8000814:	f04f 0001 	mov.w	r0, #1
 8000818:	491d      	ldr	r1, [pc, #116]	@ (8000890 <label_end+0x30>)
 800081a:	6008      	str	r0, [r1, #0]
 800081c:	f04f 0001 	mov.w	r0, #1
 8000820:	4915      	ldr	r1, [pc, #84]	@ (8000878 <label_end+0x18>)
 8000822:	6008      	str	r0, [r1, #0]
 8000824:	4770      	bx	lr

08000826 <msgsrv_leave>:
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	4913      	ldr	r1, [pc, #76]	@ (8000878 <label_end+0x18>)
 800082c:	6008      	str	r0, [r1, #0]
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4914      	ldr	r1, [pc, #80]	@ (8000884 <label_end+0x24>)
 8000834:	6008      	str	r0, [r1, #0]
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	4914      	ldr	r1, [pc, #80]	@ (800088c <label_end+0x2c>)
 800083c:	6008      	str	r0, [r1, #0]
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4913      	ldr	r1, [pc, #76]	@ (8000890 <label_end+0x30>)
 8000844:	6008      	str	r0, [r1, #0]
 8000846:	f04f 0001 	mov.w	r0, #1
 800084a:	4912      	ldr	r1, [pc, #72]	@ (8000894 <label_end+0x34>)
 800084c:	6008      	str	r0, [r1, #0]
 800084e:	f04f 0001 	mov.w	r0, #1
 8000852:	4911      	ldr	r1, [pc, #68]	@ (8000898 <label_end+0x38>)
 8000854:	6008      	str	r0, [r1, #0]
 8000856:	f04f 0001 	mov.w	r0, #1
 800085a:	4904      	ldr	r1, [pc, #16]	@ (800086c <label_end+0xc>)
 800085c:	6008      	str	r0, [r1, #0]
 800085e:	4770      	bx	lr

08000860 <label_end>:
      check_USART_1_routine();
 8000860:	bf00      	nop
 8000862:	e76c      	b.n	800073e <main+0x32>
 8000864:	20000078 	.word	0x20000078
 8000868:	200000b8 	.word	0x200000b8
 800086c:	20000212 	.word	0x20000212
 8000870:	20000213 	.word	0x20000213
 8000874:	20000214 	.word	0x20000214
 8000878:	20000215 	.word	0x20000215
 800087c:	2000020e 	.word	0x2000020e
 8000880:	20000219 	.word	0x20000219
 8000884:	20000217 	.word	0x20000217
 8000888:	20000210 	.word	0x20000210
 800088c:	20000218 	.word	0x20000218
 8000890:	20000216 	.word	0x20000216
 8000894:	2000020f 	.word	0x2000020f
 8000898:	20000211 	.word	0x20000211

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	@ 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	@ 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fe38 	bl	8002520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2310      	movs	r3, #16
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fdea 	bl	80014ac <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008de:	f000 f8c7 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f858 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000906:	f000 f8b3 	bl	8000a70 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3740      	adds	r7, #64	@ 0x40
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <MX_USART1_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 8000920:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 800092e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000932:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 800093c:	220c      	movs	r2, #12
 800093e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 800094e:	f001 f9c7 	bl	8001ce0 <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000958:	f000 f88a 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000078 	.word	0x20000078
 8000964:	40013800 	.word	0x40013800

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000986:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000990:	220c      	movs	r2, #12
 8000992:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	f001 f99d 	bl	8001ce0 <HAL_UART_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80009ac:	f000 f860 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000b8 	.word	0x200000b8
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d0:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a23      	ldr	r2, [pc, #140]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a17      	ldr	r2, [pc, #92]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_GPIO_Init+0xa8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1e:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <MX_GPIO_Init+0xac>)
 8000a20:	f000 fd2c 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480a      	ldr	r0, [pc, #40]	@ (8000a68 <MX_GPIO_Init+0xac>)
 8000a3e:	f000 fb99 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_GPIO_Init+0xb0>)
 8000a58:	f000 fb8c 	bl	8001174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40010c00 	.word	0x40010c00

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_MspInit+0x5c>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <HAL_MspInit+0x5c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_MspInit+0x5c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x5c>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_MspInit+0x5c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_MspInit+0x5c>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <HAL_MspInit+0x60>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_MspInit+0x60>)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a3f      	ldr	r2, [pc, #252]	@ (8000bf8 <HAL_UART_MspInit+0x118>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d13a      	bne.n	8000b76 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b00:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a3d      	ldr	r2, [pc, #244]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a37      	ldr	r2, [pc, #220]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4619      	mov	r1, r3
 8000b44:	482e      	ldr	r0, [pc, #184]	@ (8000c00 <HAL_UART_MspInit+0x120>)
 8000b46:	f000 fb15 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4828      	ldr	r0, [pc, #160]	@ (8000c00 <HAL_UART_MspInit+0x120>)
 8000b60:	f000 fb08 	bl	8001174 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2025      	movs	r0, #37	@ 0x25
 8000b6a:	f000 fa56 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b6e:	2025      	movs	r0, #37	@ 0x25
 8000b70:	f000 fa6f 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b74:	e03c      	b.n	8000bf0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_UART_MspInit+0x124>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d137      	bne.n	8000bf0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8a:	61d3      	str	r3, [r2, #28]
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_UART_MspInit+0x11c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <HAL_UART_MspInit+0x120>)
 8000bc4:	f000 fad6 	bl	8001174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <HAL_UART_MspInit+0x120>)
 8000bdc:	f000 faca 	bl	8001174 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2026      	movs	r0, #38	@ 0x26
 8000be6:	f000 fa18 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bea:	2026      	movs	r0, #38	@ 0x26
 8000bec:	f000 fa31 	bl	8001052 <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40004400 	.word	0x40004400

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f8ec 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f001 f921 	bl	8001eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000078 	.word	0x20000078

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f001 f917 	bl	8001eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000b8 	.word	0x200000b8

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f001 fc3a 	bl	8002530 <__errno>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20005000 	.word	0x20005000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	2000029c 	.word	0x2000029c
 8000cf0:	200003f0 	.word	0x200003f0

08000cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <SystemInit+0x5c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <SystemInit+0x5c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <SystemInit+0x5c>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4911      	ldr	r1, [pc, #68]	@ (8000d50 <SystemInit+0x5c>)
 8000d0a:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <SystemInit+0x60>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <SystemInit+0x5c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <SystemInit+0x5c>)
 8000d16:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <SystemInit+0x5c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <SystemInit+0x5c>)
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <SystemInit+0x5c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <SystemInit+0x5c>)
 8000d32:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000d36:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <SystemInit+0x5c>)
 8000d3a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8000d3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <SystemInit+0x64>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	f8ff0000 	.word	0xf8ff0000
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d68:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff ffb7 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fbd9 	bl	800253c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fcbf 	bl	800070c <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d90:	08002ef8 	.word	0x08002ef8
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d98:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000d9c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000da0:	200003ec 	.word	0x200003ec

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f923 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe5a 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f93b 	bl	800106e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f903 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200002a0 	.word	0x200002a0

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200002a0 	.word	0x200002a0

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4906      	ldr	r1, [pc, #24]	@ (8000f04 <__NVIC_EnableIRQ+0x34>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff90 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff2d 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff42 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff35 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800109a:	2b02      	cmp	r3, #2
 800109c:	d005      	beq.n	80010aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e051      	b.n	800114e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020e 	bic.w	r2, r2, #14
 80010b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a22      	ldr	r2, [pc, #136]	@ (8001158 <HAL_DMA_Abort_IT+0xd0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d029      	beq.n	8001128 <HAL_DMA_Abort_IT+0xa0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a20      	ldr	r2, [pc, #128]	@ (800115c <HAL_DMA_Abort_IT+0xd4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d022      	beq.n	8001124 <HAL_DMA_Abort_IT+0x9c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <HAL_DMA_Abort_IT+0xd8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d01a      	beq.n	800111e <HAL_DMA_Abort_IT+0x96>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001164 <HAL_DMA_Abort_IT+0xdc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d012      	beq.n	8001118 <HAL_DMA_Abort_IT+0x90>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <HAL_DMA_Abort_IT+0xe0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00a      	beq.n	8001112 <HAL_DMA_Abort_IT+0x8a>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1a      	ldr	r2, [pc, #104]	@ (800116c <HAL_DMA_Abort_IT+0xe4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d102      	bne.n	800110c <HAL_DMA_Abort_IT+0x84>
 8001106:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800110a:	e00e      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 800110c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001110:	e00b      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001116:	e008      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	e005      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 800111e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001122:	e002      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001124:	2310      	movs	r3, #16
 8001126:	e000      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001128:	2301      	movs	r3, #1
 800112a:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <HAL_DMA_Abort_IT+0xe8>)
 800112c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    } 
  }
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020008 	.word	0x40020008
 800115c:	4002001c 	.word	0x4002001c
 8001160:	40020030 	.word	0x40020030
 8001164:	40020044 	.word	0x40020044
 8001168:	40020058 	.word	0x40020058
 800116c:	4002006c 	.word	0x4002006c
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b08b      	sub	sp, #44	@ 0x2c
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	e169      	b.n	800145c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001188:	2201      	movs	r2, #1
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8158 	bne.w	8001456 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001414 <HAL_GPIO_Init+0x2a0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d05e      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011b0:	4a98      	ldr	r2, [pc, #608]	@ (8001414 <HAL_GPIO_Init+0x2a0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d875      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011b6:	4a98      	ldr	r2, [pc, #608]	@ (8001418 <HAL_GPIO_Init+0x2a4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d058      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011bc:	4a96      	ldr	r2, [pc, #600]	@ (8001418 <HAL_GPIO_Init+0x2a4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d86f      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011c2:	4a96      	ldr	r2, [pc, #600]	@ (800141c <HAL_GPIO_Init+0x2a8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d052      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011c8:	4a94      	ldr	r2, [pc, #592]	@ (800141c <HAL_GPIO_Init+0x2a8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d869      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011ce:	4a94      	ldr	r2, [pc, #592]	@ (8001420 <HAL_GPIO_Init+0x2ac>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d04c      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011d4:	4a92      	ldr	r2, [pc, #584]	@ (8001420 <HAL_GPIO_Init+0x2ac>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d863      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011da:	4a92      	ldr	r2, [pc, #584]	@ (8001424 <HAL_GPIO_Init+0x2b0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d046      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011e0:	4a90      	ldr	r2, [pc, #576]	@ (8001424 <HAL_GPIO_Init+0x2b0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d85d      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d82a      	bhi.n	8001240 <HAL_GPIO_Init+0xcc>
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d859      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011ee:	a201      	add	r2, pc, #4	@ (adr r2, 80011f4 <HAL_GPIO_Init+0x80>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	0800126f 	.word	0x0800126f
 80011f8:	08001249 	.word	0x08001249
 80011fc:	0800125b 	.word	0x0800125b
 8001200:	0800129d 	.word	0x0800129d
 8001204:	080012a3 	.word	0x080012a3
 8001208:	080012a3 	.word	0x080012a3
 800120c:	080012a3 	.word	0x080012a3
 8001210:	080012a3 	.word	0x080012a3
 8001214:	080012a3 	.word	0x080012a3
 8001218:	080012a3 	.word	0x080012a3
 800121c:	080012a3 	.word	0x080012a3
 8001220:	080012a3 	.word	0x080012a3
 8001224:	080012a3 	.word	0x080012a3
 8001228:	080012a3 	.word	0x080012a3
 800122c:	080012a3 	.word	0x080012a3
 8001230:	080012a3 	.word	0x080012a3
 8001234:	080012a3 	.word	0x080012a3
 8001238:	08001251 	.word	0x08001251
 800123c:	08001265 	.word	0x08001265
 8001240:	4a79      	ldr	r2, [pc, #484]	@ (8001428 <HAL_GPIO_Init+0x2b4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001246:	e02c      	b.n	80012a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e029      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	3304      	adds	r3, #4
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e024      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	3308      	adds	r3, #8
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e01f      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	330c      	adds	r3, #12
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e01a      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001276:	2304      	movs	r3, #4
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e013      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d105      	bne.n	8001290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001284:	2308      	movs	r3, #8
 8001286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	611a      	str	r2, [r3, #16]
          break;
 800128e:	e009      	b.n	80012a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	615a      	str	r2, [r3, #20]
          break;
 800129a:	e003      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          break;
 80012a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2bff      	cmp	r3, #255	@ 0xff
 80012a8:	d801      	bhi.n	80012ae <HAL_GPIO_Init+0x13a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_Init+0x13e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3304      	adds	r3, #4
 80012b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2bff      	cmp	r3, #255	@ 0xff
 80012b8:	d802      	bhi.n	80012c0 <HAL_GPIO_Init+0x14c>
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x152>
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	3b08      	subs	r3, #8
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	210f      	movs	r1, #15
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	6a39      	ldr	r1, [r7, #32]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80b1 	beq.w	8001456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f4:	4b4d      	ldr	r3, [pc, #308]	@ (800142c <HAL_GPIO_Init+0x2b8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <HAL_GPIO_Init+0x2b8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b4a      	ldr	r3, [pc, #296]	@ (800142c <HAL_GPIO_Init+0x2b8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800130c:	4a48      	ldr	r2, [pc, #288]	@ (8001430 <HAL_GPIO_Init+0x2bc>)
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a40      	ldr	r2, [pc, #256]	@ (8001434 <HAL_GPIO_Init+0x2c0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d013      	beq.n	8001360 <HAL_GPIO_Init+0x1ec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3f      	ldr	r2, [pc, #252]	@ (8001438 <HAL_GPIO_Init+0x2c4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1e8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3e      	ldr	r2, [pc, #248]	@ (800143c <HAL_GPIO_Init+0x2c8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1e4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a3d      	ldr	r2, [pc, #244]	@ (8001440 <HAL_GPIO_Init+0x2cc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1e0>
 8001350:	2303      	movs	r3, #3
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001354:	2304      	movs	r3, #4
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001360:	2300      	movs	r3, #0
 8001362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001372:	492f      	ldr	r1, [pc, #188]	@ (8001430 <HAL_GPIO_Init+0x2bc>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	492c      	ldr	r1, [pc, #176]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4928      	ldr	r1, [pc, #160]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4922      	ldr	r1, [pc, #136]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013c2:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	491e      	ldr	r1, [pc, #120]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	4918      	ldr	r1, [pc, #96]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4914      	ldr	r1, [pc, #80]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d021      	beq.n	8001448 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	490e      	ldr	r1, [pc, #56]	@ (8001444 <HAL_GPIO_Init+0x2d0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
 8001410:	e021      	b.n	8001456 <HAL_GPIO_Init+0x2e2>
 8001412:	bf00      	nop
 8001414:	10320000 	.word	0x10320000
 8001418:	10310000 	.word	0x10310000
 800141c:	10220000 	.word	0x10220000
 8001420:	10210000 	.word	0x10210000
 8001424:	10120000 	.word	0x10120000
 8001428:	10110000 	.word	0x10110000
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40011000 	.word	0x40011000
 8001440:	40011400 	.word	0x40011400
 8001444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_GPIO_Init+0x304>)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	43db      	mvns	r3, r3
 8001450:	4909      	ldr	r1, [pc, #36]	@ (8001478 <HAL_GPIO_Init+0x304>)
 8001452:	4013      	ands	r3, r2
 8001454:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	f47f ae8e 	bne.w	8001188 <HAL_GPIO_Init+0x14>
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	372c      	adds	r7, #44	@ 0x2c
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e272      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d00c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
 80014e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x12c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d168      	bne.n	80015d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e24c      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x76>
 8001514:	4b80      	ldr	r3, [pc, #512]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a7f      	ldr	r2, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b7b      	ldr	r3, [pc, #492]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7a      	ldr	r2, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b78      	ldr	r3, [pc, #480]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a77      	ldr	r2, [pc, #476]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xbc>
 800154e:	4b72      	ldr	r3, [pc, #456]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a71      	ldr	r2, [pc, #452]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6f      	ldr	r3, [pc, #444]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6e      	ldr	r2, [pc, #440]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001568:	4b6b      	ldr	r3, [pc, #428]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6a      	ldr	r2, [pc, #424]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a67      	ldr	r2, [pc, #412]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fc66 	bl	8000e58 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fc62 	bl	8000e58 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e200      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe4>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc52 	bl	8000e58 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fc4e 	bl	8000e58 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1ec      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x10c>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
 80015fe:	4b46      	ldr	r3, [pc, #280]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1c0      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4939      	ldr	r1, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <HAL_RCC_OscConfig+0x270>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fc07 	bl	8000e58 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fc03 	bl	8000e58 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1a1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4927      	ldr	r1, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_RCC_OscConfig+0x270>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fbe6 	bl	8000e58 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fbe2 	bl	8000e58 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e180      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03a      	beq.n	8001730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_RCC_OscConfig+0x274>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fbc6 	bl	8000e58 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fbc2 	bl	8000e58 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e160      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 fad8 	bl	8001ca4 <RCC_Delay>
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fbac 	bl	8000e58 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	e00f      	b.n	8001724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fba8 	bl	8000e58 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d908      	bls.n	8001724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e146      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	42420000 	.word	0x42420000
 8001720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b92      	ldr	r3, [pc, #584]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e9      	bne.n	8001704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a6 	beq.w	800188a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a87      	ldr	r2, [pc, #540]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b85      	ldr	r3, [pc, #532]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b82      	ldr	r3, [pc, #520]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7e      	ldr	r2, [pc, #504]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff fb69 	bl	8000e58 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff fb65 	bl	8000e58 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	@ 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e103      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b75      	ldr	r3, [pc, #468]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x312>
 80017b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02d      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x334>
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a69      	ldr	r2, [pc, #420]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a66      	ldr	r2, [pc, #408]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e01c      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x356>
 80017e8:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a60      	ldr	r2, [pc, #384]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 8001802:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a5a      	ldr	r2, [pc, #360]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a57      	ldr	r2, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb19 	bl	8000e58 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fb15 	bl	8000e58 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0b1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4b4b      	ldr	r3, [pc, #300]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCC_OscConfig+0x37e>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb03 	bl	8000e58 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff faff 	bl	8000e58 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e09b      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a3b      	ldr	r2, [pc, #236]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d061      	beq.n	8001964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d146      	bne.n	8001936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fad3 	bl	8000e58 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff facf 	bl	8000e58 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e06d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4921      	ldr	r1, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a19      	ldr	r1, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	430b      	orrs	r3, r1
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff faa3 	bl	8000e58 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fa9f 	bl	8000e58 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e03d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x46a>
 8001934:	e035      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fa8c 	bl	8000e58 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa88 	bl	8000e58 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e026      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x498>
 8001962:	e01e      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e019      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001970:	40021000 	.word	0x40021000
 8001974:	40007000 	.word	0x40007000
 8001978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_OscConfig+0x500>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4965      	ldr	r1, [pc, #404]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f9da 	bl	8000e58 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f9d6 	bl	8000e58 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4922      	ldr	r1, [pc, #136]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	@ (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1cc>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f938 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08002e9c 	.word	0x08002e9c
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b08a      	sub	sp, #40	@ 0x28
 8001b88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b8a:	4b29      	ldr	r3, [pc, #164]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b8c:	1d3c      	adds	r4, r7, #4
 8001b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b94:	f240 2301 	movw	r3, #513	@ 0x201
 8001b98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bae:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x46>
 8001bc2:	e02b      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc6:	623b      	str	r3, [r7, #32]
      break;
 8001bc8:	e02b      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3328      	adds	r3, #40	@ 0x28
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bda:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d012      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be6:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0c5b      	lsrs	r3, r3, #17
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	3328      	adds	r3, #40	@ 0x28
 8001bf2:	443b      	add	r3, r7
 8001bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0a:	e004      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	623b      	str	r3, [r7, #32]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6a3b      	ldr	r3, [r7, #32]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	@ 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc90      	pop	{r4, r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	08002e8c 	.word	0x08002e8c
 8001c34:	40021000 	.word	0x40021000
 8001c38:	007a1200 	.word	0x007a1200
 8001c3c:	003d0900 	.word	0x003d0900

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b02      	ldr	r3, [pc, #8]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff2 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08002eac 	.word	0x08002eac

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08002eac 	.word	0x08002eac

08001ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <RCC_Delay+0x34>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <RCC_Delay+0x38>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cc0:	bf00      	nop
  }
  while (Delay --);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	60fa      	str	r2, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f9      	bne.n	8001cc0 <RCC_Delay+0x1c>
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e03f      	b.n	8001d72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe feea 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2224      	movs	r2, #36	@ 0x24
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 faed 	bl	8002304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	4613      	mov	r3, r2
 8001d86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d130      	bne.n	8001df6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_UART_Transmit_IT+0x26>
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e029      	b.n	8001df8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Transmit_IT+0x38>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e022      	b.n	8001df8 <HAL_UART_Transmit_IT+0x7e>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pTxBuffPtr = pData;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2221      	movs	r2, #33	@ 0x21
 8001dd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001df0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d140      	bne.n	8001e9e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_UART_Receive_IT+0x26>
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e039      	b.n	8001ea0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Receive_IT+0x38>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e032      	b.n	8001ea0 <HAL_UART_Receive_IT+0x9e>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2222      	movs	r2, #34	@ 0x22
 8001e5e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e78:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0220 	orr.w	r2, r2, #32
 8001e98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x52>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f982 	bl	8002200 <UART_Receive_IT>
      return;
 8001efc:	e0cb      	b.n	8002096 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80ab 	beq.w	800205c <HAL_UART_IRQHandler+0x1b0>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <HAL_UART_IRQHandler+0x70>
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80a0 	beq.w	800205c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_UART_IRQHandler+0x90>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_UART_IRQHandler+0xb0>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_UART_IRQHandler+0xd0>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_UART_IRQHandler+0xf0>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f94:	f043 0208 	orr.w	r2, r3, #8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d077      	beq.n	8002094 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_UART_IRQHandler+0x112>
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f921 	bl	8002200 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <HAL_UART_IRQHandler+0x13a>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d031      	beq.n	800204a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f86c 	bl	80020c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d023      	beq.n	8002042 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002008:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200e:	2b00      	cmp	r3, #0
 8002010:	d013      	beq.n	800203a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002016:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_UART_IRQHandler+0x1f0>)
 8002018:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f832 	bl	8001088 <HAL_DMA_Abort_IT>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002034:	4610      	mov	r0, r2
 8002036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002038:	e00e      	b.n	8002058 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f839 	bl	80020b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	e00a      	b.n	8002058 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f835 	bl	80020b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	e006      	b.n	8002058 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f831 	bl	80020b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8002056:	e01d      	b.n	8002094 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002058:	bf00      	nop
    return;
 800205a:	e01b      	b.n	8002094 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_UART_IRQHandler+0x1cc>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f858 	bl	8002126 <UART_Transmit_IT>
    return;
 8002076:	e00e      	b.n	8002096 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_UART_IRQHandler+0x1ea>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f89f 	bl	80021d0 <UART_EndTransmit_IT>
    return;
 8002092:	e000      	b.n	8002096 <HAL_UART_IRQHandler+0x1ea>
    return;
 8002094:	bf00      	nop
  }
}
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	080020ff 	.word	0x080020ff

080020a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80020da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff ffca 	bl	80020b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b21      	cmp	r3, #33	@ 0x21
 8002138:	d144      	bne.n	80021c4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002142:	d11a      	bne.n	800217a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002158:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	1c9a      	adds	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	e00e      	b.n	800218c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]
 8002178:	e008      	b.n	800218c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6211      	str	r1, [r2, #32]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff55 	bl	80020a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b22      	cmp	r3, #34	@ 0x22
 8002212:	d171      	bne.n	80022f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800221c:	d123      	bne.n	8002266 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10e      	bne.n	800224a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b29b      	uxth	r3, r3
 8002234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	@ 0x28
 8002248:	e029      	b.n	800229e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	b29b      	uxth	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
 8002264:	e01b      	b.n	800229e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6858      	ldr	r0, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	1c59      	adds	r1, r3, #1
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6291      	str	r1, [r2, #40]	@ 0x28
 800227e:	b2c2      	uxtb	r2, r0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e00c      	b.n	800229e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002290:	1c58      	adds	r0, r3, #1
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	6288      	str	r0, [r1, #40]	@ 0x28
 8002296:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4619      	mov	r1, r3
 80022ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d120      	bne.n	80022f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0220 	bic.w	r2, r2, #32
 80022c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe f98c 	bl	8000608 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e002      	b.n	80022fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800233e:	f023 030c 	bic.w	r3, r3, #12
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <UART_SetConfig+0x1ac>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d14e      	bne.n	800240a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800236c:	f7ff fc86 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002370:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	4a4a      	ldr	r2, [pc, #296]	@ (80024b4 <UART_SetConfig+0x1b0>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	0119      	lsls	r1, r3, #4
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a8:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <UART_SetConfig+0x1b0>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2064      	movs	r0, #100	@ 0x64
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	@ 0x32
 80023bc:	4a3d      	ldr	r2, [pc, #244]	@ (80024b4 <UART_SetConfig+0x1b0>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c8:	4419      	add	r1, r3
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e0:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <UART_SetConfig+0x1b0>)
 80023e2:	fba3 0302 	umull	r0, r3, r3, r2
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2064      	movs	r0, #100	@ 0x64
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	3332      	adds	r3, #50	@ 0x32
 80023f4:	4a2f      	ldr	r2, [pc, #188]	@ (80024b4 <UART_SetConfig+0x1b0>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	440a      	add	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002408:	e04d      	b.n	80024a6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800240a:	f7ff fc23 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 800240e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4a23      	ldr	r2, [pc, #140]	@ (80024b4 <UART_SetConfig+0x1b0>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	0119      	lsls	r1, r3, #4
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009a      	lsls	r2, r3, #2
 800243a:	441a      	add	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	fbb2 f2f3 	udiv	r2, r2, r3
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <UART_SetConfig+0x1b0>)
 8002448:	fba3 0302 	umull	r0, r3, r3, r2
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	2064      	movs	r0, #100	@ 0x64
 8002450:	fb00 f303 	mul.w	r3, r0, r3
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	3332      	adds	r3, #50	@ 0x32
 800245a:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <UART_SetConfig+0x1b0>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002466:	4419      	add	r1, r3
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009a      	lsls	r2, r3, #2
 8002472:	441a      	add	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fbb2 f2f3 	udiv	r2, r2, r3
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <UART_SetConfig+0x1b0>)
 8002480:	fba3 0302 	umull	r0, r3, r3, r2
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	2064      	movs	r0, #100	@ 0x64
 8002488:	fb00 f303 	mul.w	r3, r0, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	3332      	adds	r3, #50	@ 0x32
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <UART_SetConfig+0x1b0>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	f003 020f 	and.w	r2, r3, #15
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	440a      	add	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40013800 	.word	0x40013800
 80024b4:	51eb851f 	.word	0x51eb851f

080024b8 <sniprintf>:
 80024b8:	b40c      	push	{r2, r3}
 80024ba:	b530      	push	{r4, r5, lr}
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <sniprintf+0x64>)
 80024be:	1e0c      	subs	r4, r1, #0
 80024c0:	681d      	ldr	r5, [r3, #0]
 80024c2:	b09d      	sub	sp, #116	@ 0x74
 80024c4:	da08      	bge.n	80024d8 <sniprintf+0x20>
 80024c6:	238b      	movs	r3, #139	@ 0x8b
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	602b      	str	r3, [r5, #0]
 80024ce:	b01d      	add	sp, #116	@ 0x74
 80024d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024d4:	b002      	add	sp, #8
 80024d6:	4770      	bx	lr
 80024d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80024dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80024e0:	bf0c      	ite	eq
 80024e2:	4623      	moveq	r3, r4
 80024e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80024e8:	9304      	str	r3, [sp, #16]
 80024ea:	9307      	str	r3, [sp, #28]
 80024ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024f0:	9002      	str	r0, [sp, #8]
 80024f2:	9006      	str	r0, [sp, #24]
 80024f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80024f8:	4628      	mov	r0, r5
 80024fa:	ab21      	add	r3, sp, #132	@ 0x84
 80024fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80024fe:	a902      	add	r1, sp, #8
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f000 f993 	bl	800282c <_svfiprintf_r>
 8002506:	1c43      	adds	r3, r0, #1
 8002508:	bfbc      	itt	lt
 800250a:	238b      	movlt	r3, #139	@ 0x8b
 800250c:	602b      	strlt	r3, [r5, #0]
 800250e:	2c00      	cmp	r4, #0
 8002510:	d0dd      	beq.n	80024ce <sniprintf+0x16>
 8002512:	2200      	movs	r2, #0
 8002514:	9b02      	ldr	r3, [sp, #8]
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e7d9      	b.n	80024ce <sniprintf+0x16>
 800251a:	bf00      	nop
 800251c:	2000000c 	.word	0x2000000c

08002520 <memset>:
 8002520:	4603      	mov	r3, r0
 8002522:	4402      	add	r2, r0
 8002524:	4293      	cmp	r3, r2
 8002526:	d100      	bne.n	800252a <memset+0xa>
 8002528:	4770      	bx	lr
 800252a:	f803 1b01 	strb.w	r1, [r3], #1
 800252e:	e7f9      	b.n	8002524 <memset+0x4>

08002530 <__errno>:
 8002530:	4b01      	ldr	r3, [pc, #4]	@ (8002538 <__errno+0x8>)
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	2000000c 	.word	0x2000000c

0800253c <__libc_init_array>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	2600      	movs	r6, #0
 8002540:	4d0c      	ldr	r5, [pc, #48]	@ (8002574 <__libc_init_array+0x38>)
 8002542:	4c0d      	ldr	r4, [pc, #52]	@ (8002578 <__libc_init_array+0x3c>)
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	42a6      	cmp	r6, r4
 800254a:	d109      	bne.n	8002560 <__libc_init_array+0x24>
 800254c:	f000 fc78 	bl	8002e40 <_init>
 8002550:	2600      	movs	r6, #0
 8002552:	4d0a      	ldr	r5, [pc, #40]	@ (800257c <__libc_init_array+0x40>)
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <__libc_init_array+0x44>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	42a6      	cmp	r6, r4
 800255c:	d105      	bne.n	800256a <__libc_init_array+0x2e>
 800255e:	bd70      	pop	{r4, r5, r6, pc}
 8002560:	f855 3b04 	ldr.w	r3, [r5], #4
 8002564:	4798      	blx	r3
 8002566:	3601      	adds	r6, #1
 8002568:	e7ee      	b.n	8002548 <__libc_init_array+0xc>
 800256a:	f855 3b04 	ldr.w	r3, [r5], #4
 800256e:	4798      	blx	r3
 8002570:	3601      	adds	r6, #1
 8002572:	e7f2      	b.n	800255a <__libc_init_array+0x1e>
 8002574:	08002ef0 	.word	0x08002ef0
 8002578:	08002ef0 	.word	0x08002ef0
 800257c:	08002ef0 	.word	0x08002ef0
 8002580:	08002ef4 	.word	0x08002ef4

08002584 <__retarget_lock_acquire_recursive>:
 8002584:	4770      	bx	lr

08002586 <__retarget_lock_release_recursive>:
 8002586:	4770      	bx	lr

08002588 <_free_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4605      	mov	r5, r0
 800258c:	2900      	cmp	r1, #0
 800258e:	d040      	beq.n	8002612 <_free_r+0x8a>
 8002590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002594:	1f0c      	subs	r4, r1, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	bfb8      	it	lt
 800259a:	18e4      	addlt	r4, r4, r3
 800259c:	f000 f8de 	bl	800275c <__malloc_lock>
 80025a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <_free_r+0x8c>)
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	b933      	cbnz	r3, 80025b4 <_free_r+0x2c>
 80025a6:	6063      	str	r3, [r4, #4]
 80025a8:	6014      	str	r4, [r2, #0]
 80025aa:	4628      	mov	r0, r5
 80025ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025b0:	f000 b8da 	b.w	8002768 <__malloc_unlock>
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	d908      	bls.n	80025ca <_free_r+0x42>
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	1821      	adds	r1, r4, r0
 80025bc:	428b      	cmp	r3, r1
 80025be:	bf01      	itttt	eq
 80025c0:	6819      	ldreq	r1, [r3, #0]
 80025c2:	685b      	ldreq	r3, [r3, #4]
 80025c4:	1809      	addeq	r1, r1, r0
 80025c6:	6021      	streq	r1, [r4, #0]
 80025c8:	e7ed      	b.n	80025a6 <_free_r+0x1e>
 80025ca:	461a      	mov	r2, r3
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b10b      	cbz	r3, 80025d4 <_free_r+0x4c>
 80025d0:	42a3      	cmp	r3, r4
 80025d2:	d9fa      	bls.n	80025ca <_free_r+0x42>
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	1850      	adds	r0, r2, r1
 80025d8:	42a0      	cmp	r0, r4
 80025da:	d10b      	bne.n	80025f4 <_free_r+0x6c>
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	4401      	add	r1, r0
 80025e0:	1850      	adds	r0, r2, r1
 80025e2:	4283      	cmp	r3, r0
 80025e4:	6011      	str	r1, [r2, #0]
 80025e6:	d1e0      	bne.n	80025aa <_free_r+0x22>
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4408      	add	r0, r1
 80025ee:	6010      	str	r0, [r2, #0]
 80025f0:	6053      	str	r3, [r2, #4]
 80025f2:	e7da      	b.n	80025aa <_free_r+0x22>
 80025f4:	d902      	bls.n	80025fc <_free_r+0x74>
 80025f6:	230c      	movs	r3, #12
 80025f8:	602b      	str	r3, [r5, #0]
 80025fa:	e7d6      	b.n	80025aa <_free_r+0x22>
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	1821      	adds	r1, r4, r0
 8002600:	428b      	cmp	r3, r1
 8002602:	bf01      	itttt	eq
 8002604:	6819      	ldreq	r1, [r3, #0]
 8002606:	685b      	ldreq	r3, [r3, #4]
 8002608:	1809      	addeq	r1, r1, r0
 800260a:	6021      	streq	r1, [r4, #0]
 800260c:	6063      	str	r3, [r4, #4]
 800260e:	6054      	str	r4, [r2, #4]
 8002610:	e7cb      	b.n	80025aa <_free_r+0x22>
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	200003e8 	.word	0x200003e8

08002618 <sbrk_aligned>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	4e0f      	ldr	r6, [pc, #60]	@ (8002658 <sbrk_aligned+0x40>)
 800261c:	460c      	mov	r4, r1
 800261e:	6831      	ldr	r1, [r6, #0]
 8002620:	4605      	mov	r5, r0
 8002622:	b911      	cbnz	r1, 800262a <sbrk_aligned+0x12>
 8002624:	f000 fbaa 	bl	8002d7c <_sbrk_r>
 8002628:	6030      	str	r0, [r6, #0]
 800262a:	4621      	mov	r1, r4
 800262c:	4628      	mov	r0, r5
 800262e:	f000 fba5 	bl	8002d7c <_sbrk_r>
 8002632:	1c43      	adds	r3, r0, #1
 8002634:	d103      	bne.n	800263e <sbrk_aligned+0x26>
 8002636:	f04f 34ff 	mov.w	r4, #4294967295
 800263a:	4620      	mov	r0, r4
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	1cc4      	adds	r4, r0, #3
 8002640:	f024 0403 	bic.w	r4, r4, #3
 8002644:	42a0      	cmp	r0, r4
 8002646:	d0f8      	beq.n	800263a <sbrk_aligned+0x22>
 8002648:	1a21      	subs	r1, r4, r0
 800264a:	4628      	mov	r0, r5
 800264c:	f000 fb96 	bl	8002d7c <_sbrk_r>
 8002650:	3001      	adds	r0, #1
 8002652:	d1f2      	bne.n	800263a <sbrk_aligned+0x22>
 8002654:	e7ef      	b.n	8002636 <sbrk_aligned+0x1e>
 8002656:	bf00      	nop
 8002658:	200003e4 	.word	0x200003e4

0800265c <_malloc_r>:
 800265c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002660:	1ccd      	adds	r5, r1, #3
 8002662:	f025 0503 	bic.w	r5, r5, #3
 8002666:	3508      	adds	r5, #8
 8002668:	2d0c      	cmp	r5, #12
 800266a:	bf38      	it	cc
 800266c:	250c      	movcc	r5, #12
 800266e:	2d00      	cmp	r5, #0
 8002670:	4606      	mov	r6, r0
 8002672:	db01      	blt.n	8002678 <_malloc_r+0x1c>
 8002674:	42a9      	cmp	r1, r5
 8002676:	d904      	bls.n	8002682 <_malloc_r+0x26>
 8002678:	230c      	movs	r3, #12
 800267a:	6033      	str	r3, [r6, #0]
 800267c:	2000      	movs	r0, #0
 800267e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002758 <_malloc_r+0xfc>
 8002686:	f000 f869 	bl	800275c <__malloc_lock>
 800268a:	f8d8 3000 	ldr.w	r3, [r8]
 800268e:	461c      	mov	r4, r3
 8002690:	bb44      	cbnz	r4, 80026e4 <_malloc_r+0x88>
 8002692:	4629      	mov	r1, r5
 8002694:	4630      	mov	r0, r6
 8002696:	f7ff ffbf 	bl	8002618 <sbrk_aligned>
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	4604      	mov	r4, r0
 800269e:	d158      	bne.n	8002752 <_malloc_r+0xf6>
 80026a0:	f8d8 4000 	ldr.w	r4, [r8]
 80026a4:	4627      	mov	r7, r4
 80026a6:	2f00      	cmp	r7, #0
 80026a8:	d143      	bne.n	8002732 <_malloc_r+0xd6>
 80026aa:	2c00      	cmp	r4, #0
 80026ac:	d04b      	beq.n	8002746 <_malloc_r+0xea>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	4639      	mov	r1, r7
 80026b2:	4630      	mov	r0, r6
 80026b4:	eb04 0903 	add.w	r9, r4, r3
 80026b8:	f000 fb60 	bl	8002d7c <_sbrk_r>
 80026bc:	4581      	cmp	r9, r0
 80026be:	d142      	bne.n	8002746 <_malloc_r+0xea>
 80026c0:	6821      	ldr	r1, [r4, #0]
 80026c2:	4630      	mov	r0, r6
 80026c4:	1a6d      	subs	r5, r5, r1
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7ff ffa6 	bl	8002618 <sbrk_aligned>
 80026cc:	3001      	adds	r0, #1
 80026ce:	d03a      	beq.n	8002746 <_malloc_r+0xea>
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	442b      	add	r3, r5
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	f8d8 3000 	ldr.w	r3, [r8]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	bb62      	cbnz	r2, 8002738 <_malloc_r+0xdc>
 80026de:	f8c8 7000 	str.w	r7, [r8]
 80026e2:	e00f      	b.n	8002704 <_malloc_r+0xa8>
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	1b52      	subs	r2, r2, r5
 80026e8:	d420      	bmi.n	800272c <_malloc_r+0xd0>
 80026ea:	2a0b      	cmp	r2, #11
 80026ec:	d917      	bls.n	800271e <_malloc_r+0xc2>
 80026ee:	1961      	adds	r1, r4, r5
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	6025      	str	r5, [r4, #0]
 80026f4:	bf18      	it	ne
 80026f6:	6059      	strne	r1, [r3, #4]
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	bf08      	it	eq
 80026fc:	f8c8 1000 	streq.w	r1, [r8]
 8002700:	5162      	str	r2, [r4, r5]
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	4630      	mov	r0, r6
 8002706:	f000 f82f 	bl	8002768 <__malloc_unlock>
 800270a:	f104 000b 	add.w	r0, r4, #11
 800270e:	1d23      	adds	r3, r4, #4
 8002710:	f020 0007 	bic.w	r0, r0, #7
 8002714:	1ac2      	subs	r2, r0, r3
 8002716:	bf1c      	itt	ne
 8002718:	1a1b      	subne	r3, r3, r0
 800271a:	50a3      	strne	r3, [r4, r2]
 800271c:	e7af      	b.n	800267e <_malloc_r+0x22>
 800271e:	6862      	ldr	r2, [r4, #4]
 8002720:	42a3      	cmp	r3, r4
 8002722:	bf0c      	ite	eq
 8002724:	f8c8 2000 	streq.w	r2, [r8]
 8002728:	605a      	strne	r2, [r3, #4]
 800272a:	e7eb      	b.n	8002704 <_malloc_r+0xa8>
 800272c:	4623      	mov	r3, r4
 800272e:	6864      	ldr	r4, [r4, #4]
 8002730:	e7ae      	b.n	8002690 <_malloc_r+0x34>
 8002732:	463c      	mov	r4, r7
 8002734:	687f      	ldr	r7, [r7, #4]
 8002736:	e7b6      	b.n	80026a6 <_malloc_r+0x4a>
 8002738:	461a      	mov	r2, r3
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	42a3      	cmp	r3, r4
 800273e:	d1fb      	bne.n	8002738 <_malloc_r+0xdc>
 8002740:	2300      	movs	r3, #0
 8002742:	6053      	str	r3, [r2, #4]
 8002744:	e7de      	b.n	8002704 <_malloc_r+0xa8>
 8002746:	230c      	movs	r3, #12
 8002748:	4630      	mov	r0, r6
 800274a:	6033      	str	r3, [r6, #0]
 800274c:	f000 f80c 	bl	8002768 <__malloc_unlock>
 8002750:	e794      	b.n	800267c <_malloc_r+0x20>
 8002752:	6005      	str	r5, [r0, #0]
 8002754:	e7d6      	b.n	8002704 <_malloc_r+0xa8>
 8002756:	bf00      	nop
 8002758:	200003e8 	.word	0x200003e8

0800275c <__malloc_lock>:
 800275c:	4801      	ldr	r0, [pc, #4]	@ (8002764 <__malloc_lock+0x8>)
 800275e:	f7ff bf11 	b.w	8002584 <__retarget_lock_acquire_recursive>
 8002762:	bf00      	nop
 8002764:	200003e0 	.word	0x200003e0

08002768 <__malloc_unlock>:
 8002768:	4801      	ldr	r0, [pc, #4]	@ (8002770 <__malloc_unlock+0x8>)
 800276a:	f7ff bf0c 	b.w	8002586 <__retarget_lock_release_recursive>
 800276e:	bf00      	nop
 8002770:	200003e0 	.word	0x200003e0

08002774 <__ssputs_r>:
 8002774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002778:	461f      	mov	r7, r3
 800277a:	688e      	ldr	r6, [r1, #8]
 800277c:	4682      	mov	sl, r0
 800277e:	42be      	cmp	r6, r7
 8002780:	460c      	mov	r4, r1
 8002782:	4690      	mov	r8, r2
 8002784:	680b      	ldr	r3, [r1, #0]
 8002786:	d82d      	bhi.n	80027e4 <__ssputs_r+0x70>
 8002788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800278c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002790:	d026      	beq.n	80027e0 <__ssputs_r+0x6c>
 8002792:	6965      	ldr	r5, [r4, #20]
 8002794:	6909      	ldr	r1, [r1, #16]
 8002796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800279a:	eba3 0901 	sub.w	r9, r3, r1
 800279e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027a2:	1c7b      	adds	r3, r7, #1
 80027a4:	444b      	add	r3, r9
 80027a6:	106d      	asrs	r5, r5, #1
 80027a8:	429d      	cmp	r5, r3
 80027aa:	bf38      	it	cc
 80027ac:	461d      	movcc	r5, r3
 80027ae:	0553      	lsls	r3, r2, #21
 80027b0:	d527      	bpl.n	8002802 <__ssputs_r+0x8e>
 80027b2:	4629      	mov	r1, r5
 80027b4:	f7ff ff52 	bl	800265c <_malloc_r>
 80027b8:	4606      	mov	r6, r0
 80027ba:	b360      	cbz	r0, 8002816 <__ssputs_r+0xa2>
 80027bc:	464a      	mov	r2, r9
 80027be:	6921      	ldr	r1, [r4, #16]
 80027c0:	f000 fafa 	bl	8002db8 <memcpy>
 80027c4:	89a3      	ldrh	r3, [r4, #12]
 80027c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ce:	81a3      	strh	r3, [r4, #12]
 80027d0:	6126      	str	r6, [r4, #16]
 80027d2:	444e      	add	r6, r9
 80027d4:	6026      	str	r6, [r4, #0]
 80027d6:	463e      	mov	r6, r7
 80027d8:	6165      	str	r5, [r4, #20]
 80027da:	eba5 0509 	sub.w	r5, r5, r9
 80027de:	60a5      	str	r5, [r4, #8]
 80027e0:	42be      	cmp	r6, r7
 80027e2:	d900      	bls.n	80027e6 <__ssputs_r+0x72>
 80027e4:	463e      	mov	r6, r7
 80027e6:	4632      	mov	r2, r6
 80027e8:	4641      	mov	r1, r8
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	f000 faac 	bl	8002d48 <memmove>
 80027f0:	2000      	movs	r0, #0
 80027f2:	68a3      	ldr	r3, [r4, #8]
 80027f4:	1b9b      	subs	r3, r3, r6
 80027f6:	60a3      	str	r3, [r4, #8]
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	4433      	add	r3, r6
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002802:	462a      	mov	r2, r5
 8002804:	f000 fae6 	bl	8002dd4 <_realloc_r>
 8002808:	4606      	mov	r6, r0
 800280a:	2800      	cmp	r0, #0
 800280c:	d1e0      	bne.n	80027d0 <__ssputs_r+0x5c>
 800280e:	4650      	mov	r0, sl
 8002810:	6921      	ldr	r1, [r4, #16]
 8002812:	f7ff feb9 	bl	8002588 <_free_r>
 8002816:	230c      	movs	r3, #12
 8002818:	f8ca 3000 	str.w	r3, [sl]
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002826:	81a3      	strh	r3, [r4, #12]
 8002828:	e7e9      	b.n	80027fe <__ssputs_r+0x8a>
	...

0800282c <_svfiprintf_r>:
 800282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002830:	4698      	mov	r8, r3
 8002832:	898b      	ldrh	r3, [r1, #12]
 8002834:	4607      	mov	r7, r0
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	460d      	mov	r5, r1
 800283a:	4614      	mov	r4, r2
 800283c:	b09d      	sub	sp, #116	@ 0x74
 800283e:	d510      	bpl.n	8002862 <_svfiprintf_r+0x36>
 8002840:	690b      	ldr	r3, [r1, #16]
 8002842:	b973      	cbnz	r3, 8002862 <_svfiprintf_r+0x36>
 8002844:	2140      	movs	r1, #64	@ 0x40
 8002846:	f7ff ff09 	bl	800265c <_malloc_r>
 800284a:	6028      	str	r0, [r5, #0]
 800284c:	6128      	str	r0, [r5, #16]
 800284e:	b930      	cbnz	r0, 800285e <_svfiprintf_r+0x32>
 8002850:	230c      	movs	r3, #12
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	b01d      	add	sp, #116	@ 0x74
 800285a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285e:	2340      	movs	r3, #64	@ 0x40
 8002860:	616b      	str	r3, [r5, #20]
 8002862:	2300      	movs	r3, #0
 8002864:	9309      	str	r3, [sp, #36]	@ 0x24
 8002866:	2320      	movs	r3, #32
 8002868:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800286c:	2330      	movs	r3, #48	@ 0x30
 800286e:	f04f 0901 	mov.w	r9, #1
 8002872:	f8cd 800c 	str.w	r8, [sp, #12]
 8002876:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002a10 <_svfiprintf_r+0x1e4>
 800287a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800287e:	4623      	mov	r3, r4
 8002880:	469a      	mov	sl, r3
 8002882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002886:	b10a      	cbz	r2, 800288c <_svfiprintf_r+0x60>
 8002888:	2a25      	cmp	r2, #37	@ 0x25
 800288a:	d1f9      	bne.n	8002880 <_svfiprintf_r+0x54>
 800288c:	ebba 0b04 	subs.w	fp, sl, r4
 8002890:	d00b      	beq.n	80028aa <_svfiprintf_r+0x7e>
 8002892:	465b      	mov	r3, fp
 8002894:	4622      	mov	r2, r4
 8002896:	4629      	mov	r1, r5
 8002898:	4638      	mov	r0, r7
 800289a:	f7ff ff6b 	bl	8002774 <__ssputs_r>
 800289e:	3001      	adds	r0, #1
 80028a0:	f000 80a7 	beq.w	80029f2 <_svfiprintf_r+0x1c6>
 80028a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80028a6:	445a      	add	r2, fp
 80028a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80028aa:	f89a 3000 	ldrb.w	r3, [sl]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 809f 	beq.w	80029f2 <_svfiprintf_r+0x1c6>
 80028b4:	2300      	movs	r3, #0
 80028b6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028be:	f10a 0a01 	add.w	sl, sl, #1
 80028c2:	9304      	str	r3, [sp, #16]
 80028c4:	9307      	str	r3, [sp, #28]
 80028c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80028cc:	4654      	mov	r4, sl
 80028ce:	2205      	movs	r2, #5
 80028d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d4:	484e      	ldr	r0, [pc, #312]	@ (8002a10 <_svfiprintf_r+0x1e4>)
 80028d6:	f000 fa61 	bl	8002d9c <memchr>
 80028da:	9a04      	ldr	r2, [sp, #16]
 80028dc:	b9d8      	cbnz	r0, 8002916 <_svfiprintf_r+0xea>
 80028de:	06d0      	lsls	r0, r2, #27
 80028e0:	bf44      	itt	mi
 80028e2:	2320      	movmi	r3, #32
 80028e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028e8:	0711      	lsls	r1, r2, #28
 80028ea:	bf44      	itt	mi
 80028ec:	232b      	movmi	r3, #43	@ 0x2b
 80028ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028f2:	f89a 3000 	ldrb.w	r3, [sl]
 80028f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80028f8:	d015      	beq.n	8002926 <_svfiprintf_r+0xfa>
 80028fa:	4654      	mov	r4, sl
 80028fc:	2000      	movs	r0, #0
 80028fe:	f04f 0c0a 	mov.w	ip, #10
 8002902:	9a07      	ldr	r2, [sp, #28]
 8002904:	4621      	mov	r1, r4
 8002906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800290a:	3b30      	subs	r3, #48	@ 0x30
 800290c:	2b09      	cmp	r3, #9
 800290e:	d94b      	bls.n	80029a8 <_svfiprintf_r+0x17c>
 8002910:	b1b0      	cbz	r0, 8002940 <_svfiprintf_r+0x114>
 8002912:	9207      	str	r2, [sp, #28]
 8002914:	e014      	b.n	8002940 <_svfiprintf_r+0x114>
 8002916:	eba0 0308 	sub.w	r3, r0, r8
 800291a:	fa09 f303 	lsl.w	r3, r9, r3
 800291e:	4313      	orrs	r3, r2
 8002920:	46a2      	mov	sl, r4
 8002922:	9304      	str	r3, [sp, #16]
 8002924:	e7d2      	b.n	80028cc <_svfiprintf_r+0xa0>
 8002926:	9b03      	ldr	r3, [sp, #12]
 8002928:	1d19      	adds	r1, r3, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	9103      	str	r1, [sp, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	bfbb      	ittet	lt
 8002932:	425b      	neglt	r3, r3
 8002934:	f042 0202 	orrlt.w	r2, r2, #2
 8002938:	9307      	strge	r3, [sp, #28]
 800293a:	9307      	strlt	r3, [sp, #28]
 800293c:	bfb8      	it	lt
 800293e:	9204      	strlt	r2, [sp, #16]
 8002940:	7823      	ldrb	r3, [r4, #0]
 8002942:	2b2e      	cmp	r3, #46	@ 0x2e
 8002944:	d10a      	bne.n	800295c <_svfiprintf_r+0x130>
 8002946:	7863      	ldrb	r3, [r4, #1]
 8002948:	2b2a      	cmp	r3, #42	@ 0x2a
 800294a:	d132      	bne.n	80029b2 <_svfiprintf_r+0x186>
 800294c:	9b03      	ldr	r3, [sp, #12]
 800294e:	3402      	adds	r4, #2
 8002950:	1d1a      	adds	r2, r3, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	9203      	str	r2, [sp, #12]
 8002956:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800295a:	9305      	str	r3, [sp, #20]
 800295c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002a14 <_svfiprintf_r+0x1e8>
 8002960:	2203      	movs	r2, #3
 8002962:	4650      	mov	r0, sl
 8002964:	7821      	ldrb	r1, [r4, #0]
 8002966:	f000 fa19 	bl	8002d9c <memchr>
 800296a:	b138      	cbz	r0, 800297c <_svfiprintf_r+0x150>
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	9b04      	ldr	r3, [sp, #16]
 8002970:	eba0 000a 	sub.w	r0, r0, sl
 8002974:	4082      	lsls	r2, r0
 8002976:	4313      	orrs	r3, r2
 8002978:	3401      	adds	r4, #1
 800297a:	9304      	str	r3, [sp, #16]
 800297c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002980:	2206      	movs	r2, #6
 8002982:	4825      	ldr	r0, [pc, #148]	@ (8002a18 <_svfiprintf_r+0x1ec>)
 8002984:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002988:	f000 fa08 	bl	8002d9c <memchr>
 800298c:	2800      	cmp	r0, #0
 800298e:	d036      	beq.n	80029fe <_svfiprintf_r+0x1d2>
 8002990:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <_svfiprintf_r+0x1f0>)
 8002992:	bb1b      	cbnz	r3, 80029dc <_svfiprintf_r+0x1b0>
 8002994:	9b03      	ldr	r3, [sp, #12]
 8002996:	3307      	adds	r3, #7
 8002998:	f023 0307 	bic.w	r3, r3, #7
 800299c:	3308      	adds	r3, #8
 800299e:	9303      	str	r3, [sp, #12]
 80029a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029a2:	4433      	add	r3, r6
 80029a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80029a6:	e76a      	b.n	800287e <_svfiprintf_r+0x52>
 80029a8:	460c      	mov	r4, r1
 80029aa:	2001      	movs	r0, #1
 80029ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80029b0:	e7a8      	b.n	8002904 <_svfiprintf_r+0xd8>
 80029b2:	2300      	movs	r3, #0
 80029b4:	f04f 0c0a 	mov.w	ip, #10
 80029b8:	4619      	mov	r1, r3
 80029ba:	3401      	adds	r4, #1
 80029bc:	9305      	str	r3, [sp, #20]
 80029be:	4620      	mov	r0, r4
 80029c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029c4:	3a30      	subs	r2, #48	@ 0x30
 80029c6:	2a09      	cmp	r2, #9
 80029c8:	d903      	bls.n	80029d2 <_svfiprintf_r+0x1a6>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0c6      	beq.n	800295c <_svfiprintf_r+0x130>
 80029ce:	9105      	str	r1, [sp, #20]
 80029d0:	e7c4      	b.n	800295c <_svfiprintf_r+0x130>
 80029d2:	4604      	mov	r4, r0
 80029d4:	2301      	movs	r3, #1
 80029d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80029da:	e7f0      	b.n	80029be <_svfiprintf_r+0x192>
 80029dc:	ab03      	add	r3, sp, #12
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	462a      	mov	r2, r5
 80029e2:	4638      	mov	r0, r7
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <_svfiprintf_r+0x1f4>)
 80029e6:	a904      	add	r1, sp, #16
 80029e8:	f3af 8000 	nop.w
 80029ec:	1c42      	adds	r2, r0, #1
 80029ee:	4606      	mov	r6, r0
 80029f0:	d1d6      	bne.n	80029a0 <_svfiprintf_r+0x174>
 80029f2:	89ab      	ldrh	r3, [r5, #12]
 80029f4:	065b      	lsls	r3, r3, #25
 80029f6:	f53f af2d 	bmi.w	8002854 <_svfiprintf_r+0x28>
 80029fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029fc:	e72c      	b.n	8002858 <_svfiprintf_r+0x2c>
 80029fe:	ab03      	add	r3, sp, #12
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	462a      	mov	r2, r5
 8002a04:	4638      	mov	r0, r7
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <_svfiprintf_r+0x1f4>)
 8002a08:	a904      	add	r1, sp, #16
 8002a0a:	f000 f87d 	bl	8002b08 <_printf_i>
 8002a0e:	e7ed      	b.n	80029ec <_svfiprintf_r+0x1c0>
 8002a10:	08002eb4 	.word	0x08002eb4
 8002a14:	08002eba 	.word	0x08002eba
 8002a18:	08002ebe 	.word	0x08002ebe
 8002a1c:	00000000 	.word	0x00000000
 8002a20:	08002775 	.word	0x08002775

08002a24 <_printf_common>:
 8002a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a28:	4616      	mov	r6, r2
 8002a2a:	4698      	mov	r8, r3
 8002a2c:	688a      	ldr	r2, [r1, #8]
 8002a2e:	690b      	ldr	r3, [r1, #16]
 8002a30:	4607      	mov	r7, r0
 8002a32:	4293      	cmp	r3, r2
 8002a34:	bfb8      	it	lt
 8002a36:	4613      	movlt	r3, r2
 8002a38:	6033      	str	r3, [r6, #0]
 8002a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a3e:	460c      	mov	r4, r1
 8002a40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a44:	b10a      	cbz	r2, 8002a4a <_printf_common+0x26>
 8002a46:	3301      	adds	r3, #1
 8002a48:	6033      	str	r3, [r6, #0]
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	0699      	lsls	r1, r3, #26
 8002a4e:	bf42      	ittt	mi
 8002a50:	6833      	ldrmi	r3, [r6, #0]
 8002a52:	3302      	addmi	r3, #2
 8002a54:	6033      	strmi	r3, [r6, #0]
 8002a56:	6825      	ldr	r5, [r4, #0]
 8002a58:	f015 0506 	ands.w	r5, r5, #6
 8002a5c:	d106      	bne.n	8002a6c <_printf_common+0x48>
 8002a5e:	f104 0a19 	add.w	sl, r4, #25
 8002a62:	68e3      	ldr	r3, [r4, #12]
 8002a64:	6832      	ldr	r2, [r6, #0]
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	42ab      	cmp	r3, r5
 8002a6a:	dc2b      	bgt.n	8002ac4 <_printf_common+0xa0>
 8002a6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a70:	6822      	ldr	r2, [r4, #0]
 8002a72:	3b00      	subs	r3, #0
 8002a74:	bf18      	it	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	0692      	lsls	r2, r2, #26
 8002a7a:	d430      	bmi.n	8002ade <_printf_common+0xba>
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	4638      	mov	r0, r7
 8002a80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a84:	47c8      	blx	r9
 8002a86:	3001      	adds	r0, #1
 8002a88:	d023      	beq.n	8002ad2 <_printf_common+0xae>
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	6922      	ldr	r2, [r4, #16]
 8002a8e:	f003 0306 	and.w	r3, r3, #6
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf14      	ite	ne
 8002a96:	2500      	movne	r5, #0
 8002a98:	6833      	ldreq	r3, [r6, #0]
 8002a9a:	f04f 0600 	mov.w	r6, #0
 8002a9e:	bf08      	it	eq
 8002aa0:	68e5      	ldreq	r5, [r4, #12]
 8002aa2:	f104 041a 	add.w	r4, r4, #26
 8002aa6:	bf08      	it	eq
 8002aa8:	1aed      	subeq	r5, r5, r3
 8002aaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002aae:	bf08      	it	eq
 8002ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bfc4      	itt	gt
 8002ab8:	1a9b      	subgt	r3, r3, r2
 8002aba:	18ed      	addgt	r5, r5, r3
 8002abc:	42b5      	cmp	r5, r6
 8002abe:	d11a      	bne.n	8002af6 <_printf_common+0xd2>
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e008      	b.n	8002ad6 <_printf_common+0xb2>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4652      	mov	r2, sl
 8002ac8:	4641      	mov	r1, r8
 8002aca:	4638      	mov	r0, r7
 8002acc:	47c8      	blx	r9
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d103      	bne.n	8002ada <_printf_common+0xb6>
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ada:	3501      	adds	r5, #1
 8002adc:	e7c1      	b.n	8002a62 <_printf_common+0x3e>
 8002ade:	2030      	movs	r0, #48	@ 0x30
 8002ae0:	18e1      	adds	r1, r4, r3
 8002ae2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002aec:	4422      	add	r2, r4
 8002aee:	3302      	adds	r3, #2
 8002af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002af4:	e7c2      	b.n	8002a7c <_printf_common+0x58>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4622      	mov	r2, r4
 8002afa:	4641      	mov	r1, r8
 8002afc:	4638      	mov	r0, r7
 8002afe:	47c8      	blx	r9
 8002b00:	3001      	adds	r0, #1
 8002b02:	d0e6      	beq.n	8002ad2 <_printf_common+0xae>
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7d9      	b.n	8002abc <_printf_common+0x98>

08002b08 <_printf_i>:
 8002b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	7e0f      	ldrb	r7, [r1, #24]
 8002b0e:	4691      	mov	r9, r2
 8002b10:	2f78      	cmp	r7, #120	@ 0x78
 8002b12:	4680      	mov	r8, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	469a      	mov	sl, r3
 8002b18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b1e:	d807      	bhi.n	8002b30 <_printf_i+0x28>
 8002b20:	2f62      	cmp	r7, #98	@ 0x62
 8002b22:	d80a      	bhi.n	8002b3a <_printf_i+0x32>
 8002b24:	2f00      	cmp	r7, #0
 8002b26:	f000 80d3 	beq.w	8002cd0 <_printf_i+0x1c8>
 8002b2a:	2f58      	cmp	r7, #88	@ 0x58
 8002b2c:	f000 80ba 	beq.w	8002ca4 <_printf_i+0x19c>
 8002b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b38:	e03a      	b.n	8002bb0 <_printf_i+0xa8>
 8002b3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b3e:	2b15      	cmp	r3, #21
 8002b40:	d8f6      	bhi.n	8002b30 <_printf_i+0x28>
 8002b42:	a101      	add	r1, pc, #4	@ (adr r1, 8002b48 <_printf_i+0x40>)
 8002b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b48:	08002ba1 	.word	0x08002ba1
 8002b4c:	08002bb5 	.word	0x08002bb5
 8002b50:	08002b31 	.word	0x08002b31
 8002b54:	08002b31 	.word	0x08002b31
 8002b58:	08002b31 	.word	0x08002b31
 8002b5c:	08002b31 	.word	0x08002b31
 8002b60:	08002bb5 	.word	0x08002bb5
 8002b64:	08002b31 	.word	0x08002b31
 8002b68:	08002b31 	.word	0x08002b31
 8002b6c:	08002b31 	.word	0x08002b31
 8002b70:	08002b31 	.word	0x08002b31
 8002b74:	08002cb7 	.word	0x08002cb7
 8002b78:	08002bdf 	.word	0x08002bdf
 8002b7c:	08002c71 	.word	0x08002c71
 8002b80:	08002b31 	.word	0x08002b31
 8002b84:	08002b31 	.word	0x08002b31
 8002b88:	08002cd9 	.word	0x08002cd9
 8002b8c:	08002b31 	.word	0x08002b31
 8002b90:	08002bdf 	.word	0x08002bdf
 8002b94:	08002b31 	.word	0x08002b31
 8002b98:	08002b31 	.word	0x08002b31
 8002b9c:	08002c79 	.word	0x08002c79
 8002ba0:	6833      	ldr	r3, [r6, #0]
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6032      	str	r2, [r6, #0]
 8002ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e09e      	b.n	8002cf2 <_printf_i+0x1ea>
 8002bb4:	6833      	ldr	r3, [r6, #0]
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	1d19      	adds	r1, r3, #4
 8002bba:	6031      	str	r1, [r6, #0]
 8002bbc:	0606      	lsls	r6, r0, #24
 8002bbe:	d501      	bpl.n	8002bc4 <_printf_i+0xbc>
 8002bc0:	681d      	ldr	r5, [r3, #0]
 8002bc2:	e003      	b.n	8002bcc <_printf_i+0xc4>
 8002bc4:	0645      	lsls	r5, r0, #25
 8002bc6:	d5fb      	bpl.n	8002bc0 <_printf_i+0xb8>
 8002bc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bcc:	2d00      	cmp	r5, #0
 8002bce:	da03      	bge.n	8002bd8 <_printf_i+0xd0>
 8002bd0:	232d      	movs	r3, #45	@ 0x2d
 8002bd2:	426d      	negs	r5, r5
 8002bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bd8:	230a      	movs	r3, #10
 8002bda:	4859      	ldr	r0, [pc, #356]	@ (8002d40 <_printf_i+0x238>)
 8002bdc:	e011      	b.n	8002c02 <_printf_i+0xfa>
 8002bde:	6821      	ldr	r1, [r4, #0]
 8002be0:	6833      	ldr	r3, [r6, #0]
 8002be2:	0608      	lsls	r0, r1, #24
 8002be4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002be8:	d402      	bmi.n	8002bf0 <_printf_i+0xe8>
 8002bea:	0649      	lsls	r1, r1, #25
 8002bec:	bf48      	it	mi
 8002bee:	b2ad      	uxthmi	r5, r5
 8002bf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bf2:	6033      	str	r3, [r6, #0]
 8002bf4:	bf14      	ite	ne
 8002bf6:	230a      	movne	r3, #10
 8002bf8:	2308      	moveq	r3, #8
 8002bfa:	4851      	ldr	r0, [pc, #324]	@ (8002d40 <_printf_i+0x238>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c02:	6866      	ldr	r6, [r4, #4]
 8002c04:	2e00      	cmp	r6, #0
 8002c06:	bfa8      	it	ge
 8002c08:	6821      	ldrge	r1, [r4, #0]
 8002c0a:	60a6      	str	r6, [r4, #8]
 8002c0c:	bfa4      	itt	ge
 8002c0e:	f021 0104 	bicge.w	r1, r1, #4
 8002c12:	6021      	strge	r1, [r4, #0]
 8002c14:	b90d      	cbnz	r5, 8002c1a <_printf_i+0x112>
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	d04b      	beq.n	8002cb2 <_printf_i+0x1aa>
 8002c1a:	4616      	mov	r6, r2
 8002c1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c20:	fb03 5711 	mls	r7, r3, r1, r5
 8002c24:	5dc7      	ldrb	r7, [r0, r7]
 8002c26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c2a:	462f      	mov	r7, r5
 8002c2c:	42bb      	cmp	r3, r7
 8002c2e:	460d      	mov	r5, r1
 8002c30:	d9f4      	bls.n	8002c1c <_printf_i+0x114>
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d10b      	bne.n	8002c4e <_printf_i+0x146>
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	07df      	lsls	r7, r3, #31
 8002c3a:	d508      	bpl.n	8002c4e <_printf_i+0x146>
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	6861      	ldr	r1, [r4, #4]
 8002c40:	4299      	cmp	r1, r3
 8002c42:	bfde      	ittt	le
 8002c44:	2330      	movle	r3, #48	@ 0x30
 8002c46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c4e:	1b92      	subs	r2, r2, r6
 8002c50:	6122      	str	r2, [r4, #16]
 8002c52:	464b      	mov	r3, r9
 8002c54:	4621      	mov	r1, r4
 8002c56:	4640      	mov	r0, r8
 8002c58:	f8cd a000 	str.w	sl, [sp]
 8002c5c:	aa03      	add	r2, sp, #12
 8002c5e:	f7ff fee1 	bl	8002a24 <_printf_common>
 8002c62:	3001      	adds	r0, #1
 8002c64:	d14a      	bne.n	8002cfc <_printf_i+0x1f4>
 8002c66:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6a:	b004      	add	sp, #16
 8002c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	6023      	str	r3, [r4, #0]
 8002c78:	2778      	movs	r7, #120	@ 0x78
 8002c7a:	4832      	ldr	r0, [pc, #200]	@ (8002d44 <_printf_i+0x23c>)
 8002c7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	6831      	ldr	r1, [r6, #0]
 8002c84:	061f      	lsls	r7, r3, #24
 8002c86:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c8a:	d402      	bmi.n	8002c92 <_printf_i+0x18a>
 8002c8c:	065f      	lsls	r7, r3, #25
 8002c8e:	bf48      	it	mi
 8002c90:	b2ad      	uxthmi	r5, r5
 8002c92:	6031      	str	r1, [r6, #0]
 8002c94:	07d9      	lsls	r1, r3, #31
 8002c96:	bf44      	itt	mi
 8002c98:	f043 0320 	orrmi.w	r3, r3, #32
 8002c9c:	6023      	strmi	r3, [r4, #0]
 8002c9e:	b11d      	cbz	r5, 8002ca8 <_printf_i+0x1a0>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	e7ab      	b.n	8002bfc <_printf_i+0xf4>
 8002ca4:	4826      	ldr	r0, [pc, #152]	@ (8002d40 <_printf_i+0x238>)
 8002ca6:	e7e9      	b.n	8002c7c <_printf_i+0x174>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	f023 0320 	bic.w	r3, r3, #32
 8002cae:	6023      	str	r3, [r4, #0]
 8002cb0:	e7f6      	b.n	8002ca0 <_printf_i+0x198>
 8002cb2:	4616      	mov	r6, r2
 8002cb4:	e7bd      	b.n	8002c32 <_printf_i+0x12a>
 8002cb6:	6833      	ldr	r3, [r6, #0]
 8002cb8:	6825      	ldr	r5, [r4, #0]
 8002cba:	1d18      	adds	r0, r3, #4
 8002cbc:	6961      	ldr	r1, [r4, #20]
 8002cbe:	6030      	str	r0, [r6, #0]
 8002cc0:	062e      	lsls	r6, r5, #24
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	d501      	bpl.n	8002cca <_printf_i+0x1c2>
 8002cc6:	6019      	str	r1, [r3, #0]
 8002cc8:	e002      	b.n	8002cd0 <_printf_i+0x1c8>
 8002cca:	0668      	lsls	r0, r5, #25
 8002ccc:	d5fb      	bpl.n	8002cc6 <_printf_i+0x1be>
 8002cce:	8019      	strh	r1, [r3, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4616      	mov	r6, r2
 8002cd4:	6123      	str	r3, [r4, #16]
 8002cd6:	e7bc      	b.n	8002c52 <_printf_i+0x14a>
 8002cd8:	6833      	ldr	r3, [r6, #0]
 8002cda:	2100      	movs	r1, #0
 8002cdc:	1d1a      	adds	r2, r3, #4
 8002cde:	6032      	str	r2, [r6, #0]
 8002ce0:	681e      	ldr	r6, [r3, #0]
 8002ce2:	6862      	ldr	r2, [r4, #4]
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f000 f859 	bl	8002d9c <memchr>
 8002cea:	b108      	cbz	r0, 8002cf0 <_printf_i+0x1e8>
 8002cec:	1b80      	subs	r0, r0, r6
 8002cee:	6060      	str	r0, [r4, #4]
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cfa:	e7aa      	b.n	8002c52 <_printf_i+0x14a>
 8002cfc:	4632      	mov	r2, r6
 8002cfe:	4649      	mov	r1, r9
 8002d00:	4640      	mov	r0, r8
 8002d02:	6923      	ldr	r3, [r4, #16]
 8002d04:	47d0      	blx	sl
 8002d06:	3001      	adds	r0, #1
 8002d08:	d0ad      	beq.n	8002c66 <_printf_i+0x15e>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	079b      	lsls	r3, r3, #30
 8002d0e:	d413      	bmi.n	8002d38 <_printf_i+0x230>
 8002d10:	68e0      	ldr	r0, [r4, #12]
 8002d12:	9b03      	ldr	r3, [sp, #12]
 8002d14:	4298      	cmp	r0, r3
 8002d16:	bfb8      	it	lt
 8002d18:	4618      	movlt	r0, r3
 8002d1a:	e7a6      	b.n	8002c6a <_printf_i+0x162>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4649      	mov	r1, r9
 8002d22:	4640      	mov	r0, r8
 8002d24:	47d0      	blx	sl
 8002d26:	3001      	adds	r0, #1
 8002d28:	d09d      	beq.n	8002c66 <_printf_i+0x15e>
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	68e3      	ldr	r3, [r4, #12]
 8002d2e:	9903      	ldr	r1, [sp, #12]
 8002d30:	1a5b      	subs	r3, r3, r1
 8002d32:	42ab      	cmp	r3, r5
 8002d34:	dcf2      	bgt.n	8002d1c <_printf_i+0x214>
 8002d36:	e7eb      	b.n	8002d10 <_printf_i+0x208>
 8002d38:	2500      	movs	r5, #0
 8002d3a:	f104 0619 	add.w	r6, r4, #25
 8002d3e:	e7f5      	b.n	8002d2c <_printf_i+0x224>
 8002d40:	08002ec5 	.word	0x08002ec5
 8002d44:	08002ed6 	.word	0x08002ed6

08002d48 <memmove>:
 8002d48:	4288      	cmp	r0, r1
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	eb01 0402 	add.w	r4, r1, r2
 8002d50:	d902      	bls.n	8002d58 <memmove+0x10>
 8002d52:	4284      	cmp	r4, r0
 8002d54:	4623      	mov	r3, r4
 8002d56:	d807      	bhi.n	8002d68 <memmove+0x20>
 8002d58:	1e43      	subs	r3, r0, #1
 8002d5a:	42a1      	cmp	r1, r4
 8002d5c:	d008      	beq.n	8002d70 <memmove+0x28>
 8002d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d66:	e7f8      	b.n	8002d5a <memmove+0x12>
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4402      	add	r2, r0
 8002d6c:	428a      	cmp	r2, r1
 8002d6e:	d100      	bne.n	8002d72 <memmove+0x2a>
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d7a:	e7f7      	b.n	8002d6c <memmove+0x24>

08002d7c <_sbrk_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	2300      	movs	r3, #0
 8002d80:	4d05      	ldr	r5, [pc, #20]	@ (8002d98 <_sbrk_r+0x1c>)
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	602b      	str	r3, [r5, #0]
 8002d88:	f7fd ff7e 	bl	8000c88 <_sbrk>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	d102      	bne.n	8002d96 <_sbrk_r+0x1a>
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	b103      	cbz	r3, 8002d96 <_sbrk_r+0x1a>
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	200003dc 	.word	0x200003dc

08002d9c <memchr>:
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b510      	push	{r4, lr}
 8002da0:	b2c9      	uxtb	r1, r1
 8002da2:	4402      	add	r2, r0
 8002da4:	4293      	cmp	r3, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	d101      	bne.n	8002dae <memchr+0x12>
 8002daa:	2000      	movs	r0, #0
 8002dac:	e003      	b.n	8002db6 <memchr+0x1a>
 8002dae:	7804      	ldrb	r4, [r0, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	428c      	cmp	r4, r1
 8002db4:	d1f6      	bne.n	8002da4 <memchr+0x8>
 8002db6:	bd10      	pop	{r4, pc}

08002db8 <memcpy>:
 8002db8:	440a      	add	r2, r1
 8002dba:	4291      	cmp	r1, r2
 8002dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dc0:	d100      	bne.n	8002dc4 <memcpy+0xc>
 8002dc2:	4770      	bx	lr
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dca:	4291      	cmp	r1, r2
 8002dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dd0:	d1f9      	bne.n	8002dc6 <memcpy+0xe>
 8002dd2:	bd10      	pop	{r4, pc}

08002dd4 <_realloc_r>:
 8002dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd8:	4680      	mov	r8, r0
 8002dda:	4615      	mov	r5, r2
 8002ddc:	460c      	mov	r4, r1
 8002dde:	b921      	cbnz	r1, 8002dea <_realloc_r+0x16>
 8002de0:	4611      	mov	r1, r2
 8002de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002de6:	f7ff bc39 	b.w	800265c <_malloc_r>
 8002dea:	b92a      	cbnz	r2, 8002df8 <_realloc_r+0x24>
 8002dec:	f7ff fbcc 	bl	8002588 <_free_r>
 8002df0:	2400      	movs	r4, #0
 8002df2:	4620      	mov	r0, r4
 8002df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df8:	f000 f81a 	bl	8002e30 <_malloc_usable_size_r>
 8002dfc:	4285      	cmp	r5, r0
 8002dfe:	4606      	mov	r6, r0
 8002e00:	d802      	bhi.n	8002e08 <_realloc_r+0x34>
 8002e02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002e06:	d8f4      	bhi.n	8002df2 <_realloc_r+0x1e>
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	f7ff fc26 	bl	800265c <_malloc_r>
 8002e10:	4607      	mov	r7, r0
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0ec      	beq.n	8002df0 <_realloc_r+0x1c>
 8002e16:	42b5      	cmp	r5, r6
 8002e18:	462a      	mov	r2, r5
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	bf28      	it	cs
 8002e1e:	4632      	movcs	r2, r6
 8002e20:	f7ff ffca 	bl	8002db8 <memcpy>
 8002e24:	4621      	mov	r1, r4
 8002e26:	4640      	mov	r0, r8
 8002e28:	f7ff fbae 	bl	8002588 <_free_r>
 8002e2c:	463c      	mov	r4, r7
 8002e2e:	e7e0      	b.n	8002df2 <_realloc_r+0x1e>

08002e30 <_malloc_usable_size_r>:
 8002e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e34:	1f18      	subs	r0, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bfbc      	itt	lt
 8002e3a:	580b      	ldrlt	r3, [r1, r0]
 8002e3c:	18c0      	addlt	r0, r0, r3
 8002e3e:	4770      	bx	lr

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
